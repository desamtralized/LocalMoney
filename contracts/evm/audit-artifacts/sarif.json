{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Slither",
          "informationUri": "https://github.com/crytic/slither",
          "version": "0.11.3",
          "rules": [
            {
              "id": "0-1-arbitrary-send-eth",
              "name": "arbitrary-send-eth",
              "properties": {
                "precision": "high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Functions that send Ether to arbitrary destinations"
              },
              "help": {
                "text": "Ensure that an arbitrary user cannot withdraw unauthorized funds."
              }
            },
            {
              "id": "0-1-weak-prng",
              "name": "weak-prng",
              "properties": {
                "precision": "high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Weak PRNG"
              },
              "help": {
                "text": "Do not use `block.timestamp`, `now` or `blockhash` as a source of randomness"
              }
            },
            {
              "id": "0-1-incorrect-exp",
              "name": "incorrect-exp",
              "properties": {
                "precision": "high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Incorrect exponentiation"
              },
              "help": {
                "text": "Use the correct operator `**` for exponentiation."
              }
            },
            {
              "id": "0-0-uninitialized-state",
              "name": "uninitialized-state",
              "properties": {
                "precision": "very-high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Uninitialized state variables"
              },
              "help": {
                "text": "\nInitialize all the variables. If a variable is meant to be initialized to zero, explicitly set it to zero to improve code readability.\n"
              }
            },
            {
              "id": "1-1-divide-before-multiply",
              "name": "divide-before-multiply",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Divide before multiply"
              },
              "help": {
                "text": "Consider ordering multiplication before division."
              }
            },
            {
              "id": "1-0-incorrect-equality",
              "name": "incorrect-equality",
              "properties": {
                "precision": "very-high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Dangerous strict equalities"
              },
              "help": {
                "text": "Don't use strict equality to determine if an account has enough Ether or tokens."
              }
            },
            {
              "id": "1-1-unused-return",
              "name": "unused-return",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Unused return"
              },
              "help": {
                "text": "Ensure that all the return values of the function calls are used."
              }
            },
            {
              "id": "2-0-shadowing-local",
              "name": "shadowing-local",
              "properties": {
                "precision": "very-high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Local variable shadowing"
              },
              "help": {
                "text": "Rename the local variables that shadow another component."
              }
            },
            {
              "id": "2-1-reentrancy-benign",
              "name": "reentrancy-benign",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Reentrancy vulnerabilities"
              },
              "help": {
                "text": "Apply the [`check-effects-interactions` pattern](http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy)."
              }
            },
            {
              "id": "2-1-reentrancy-events",
              "name": "reentrancy-events",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Reentrancy vulnerabilities"
              },
              "help": {
                "text": "Apply the [`check-effects-interactions` pattern](https://docs.soliditylang.org/en/latest/security-considerations.html#re-entrancy)."
              }
            },
            {
              "id": "2-1-timestamp",
              "name": "timestamp",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Block timestamp"
              },
              "help": {
                "text": "Avoid relying on `block.timestamp`."
              }
            },
            {
              "id": "3-0-assembly",
              "name": "assembly",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Assembly usage"
              },
              "help": {
                "text": "Do not use `evm` assembly."
              }
            },
            {
              "id": "3-0-pragma",
              "name": "pragma",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Different pragma directives are used"
              },
              "help": {
                "text": "Use one Solidity version."
              }
            },
            {
              "id": "3-0-cyclomatic-complexity",
              "name": "cyclomatic-complexity",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Cyclomatic complexity"
              },
              "help": {
                "text": "Reduce cyclomatic complexity by splitting the function into several smaller subroutines."
              }
            },
            {
              "id": "3-0-solc-version",
              "name": "solc-version",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Incorrect versions of Solidity"
              },
              "help": {
                "text": "\nDeploy with a recent version of Solidity (at least 0.8.0) with no known severe issues.\n\nUse a simple pragma version that allows any of these versions.\nConsider using the latest version of Solidity for testing."
              }
            },
            {
              "id": "3-0-low-level-calls",
              "name": "low-level-calls",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Low-level calls"
              },
              "help": {
                "text": "Avoid low-level calls. Check the call success. If the call is meant for a contract, check for code existence."
              }
            },
            {
              "id": "3-0-naming-convention",
              "name": "naming-convention",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Conformance to Solidity naming conventions"
              },
              "help": {
                "text": "Follow the Solidity [naming convention](https://solidity.readthedocs.io/en/v0.4.25/style-guide.html#naming-conventions)."
              }
            },
            {
              "id": "3-1-too-many-digits",
              "name": "too-many-digits",
              "properties": {
                "precision": "high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Too many digits"
              },
              "help": {
                "text": "\nUse:\n- [Ether suffix](https://solidity.readthedocs.io/en/latest/units-and-global-variables.html#ether-units),\n- [Time suffix](https://solidity.readthedocs.io/en/latest/units-and-global-variables.html#time-units), or\n- [The scientific notation](https://solidity.readthedocs.io/en/latest/types.html#rational-and-integer-literals)\n"
              }
            },
            {
              "id": "3-0-unused-state",
              "name": "unused-state",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Unused state variable"
              },
              "help": {
                "text": "Remove unused state variables."
              }
            },
            {
              "id": "4-0-immutable-states",
              "name": "immutable-states",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "State variables that could be declared immutable"
              },
              "help": {
                "text": "Add the `immutable` attribute to state variables that never change or are set only in the constructor."
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "0-1-arbitrary-send-eth",
          "message": {
            "text": "Trade._transfer(address,address,uint256) (contracts/Trade.sol#912-921) sends eth to arbitrary user\n\tDangerous calls:\n\t- (success,None) = _to.call{value: _amount}() (contracts/Trade.sol#915)\n",
            "markdown": "[Trade._transfer(address,address,uint256)](contracts/Trade.sol#L912-L921) sends eth to arbitrary user\n\tDangerous calls:\n\t- [(success,None) = _to.call{value: _amount}()](contracts/Trade.sol#L915)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 912,
                  "endLine": 921
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a14f5a5be21fc9c16ae99eca94e55906effdeb0368f3bdf6797f0414c5a66a9b"
          }
        },
        {
          "ruleId": "0-1-weak-prng",
          "message": {
            "text": "Trade._assignArbitratorFallback(uint256,string) (contracts/Trade.sol#1063-1097) uses a weak PRNG: \"selectedIndex = uint256(keccak256(bytes)(abi.encodePacked(block.timestamp,block.prevrandao,_tradeId,tx.origin,gasleft()(),blockhash(uint256)(block.number - 1)))) % activeCount (contracts/Trade.sol#1083-1090)\" \n",
            "markdown": "[Trade._assignArbitratorFallback(uint256,string)](contracts/Trade.sol#L1063-L1097) uses a weak PRNG: \"[selectedIndex = uint256(keccak256(bytes)(abi.encodePacked(block.timestamp,block.prevrandao,_tradeId,tx.origin,gasleft()(),blockhash(uint256)(block.number - 1)))) % activeCount](contracts/Trade.sol#L1083-L1090)\" \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 1063,
                  "endLine": 1097
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b10493579642a1dad523df684627adf7d44ec301f44c96c11ac4f7214f27181c"
          }
        },
        {
          "ruleId": "0-1-incorrect-exp",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#204-275) has bitwise-xor operator ^ instead of the exponentiation operator **: \n\t - inverse = (3 * denominator) ^ 2 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#257)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L204-L275) has bitwise-xor operator ^ instead of the exponentiation operator **: \n\t - [inverse = (3 * denominator) ^ 2](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L257)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 275
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4d936ce201916582dc2961cee4ed7729f33d7e5e2f4c54e08aaf3d1ed886f21a"
          }
        },
        {
          "ruleId": "0-0-uninitialized-state",
          "message": {
            "text": "PriceOracle.tokenPrices (contracts/PriceOracle.sol#63) is never initialized. It is used in:\n\t- PriceOracle.getCachedTokenPrice(address) (contracts/PriceOracle.sol#243-255)\n\t- PriceOracle.isTokenPriceValid(address) (contracts/PriceOracle.sol#307-314)\n\t- PriceOracle.getTokenPriceAge(address) (contracts/PriceOracle.sol#321-327)\n\t- PriceOracle._getTokenPriceInUSD(address) (contracts/PriceOracle.sol#358-383)\n",
            "markdown": "[PriceOracle.tokenPrices](contracts/PriceOracle.sol#L63) is never initialized. It is used in:\n\t- [PriceOracle.getCachedTokenPrice(address)](contracts/PriceOracle.sol#L243-L255)\n\t- [PriceOracle.isTokenPriceValid(address)](contracts/PriceOracle.sol#L307-L314)\n\t- [PriceOracle.getTokenPriceAge(address)](contracts/PriceOracle.sol#L321-L327)\n\t- [PriceOracle._getTokenPriceInUSD(address)](contracts/PriceOracle.sol#L358-L383)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c23a501b620d320583277e35e5b10a41426c3308b6df73d681a3349749890323"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#204-275) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#242)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#265)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L204-L275) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L242)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L265)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 275
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3d48e88a78e6c2ea76ea46494733ec31da351636c3208631f9ab09d6ec7bad6e"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#204-275) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#242)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#261)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L204-L275) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L242)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L261)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 275
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4aeacef08ff359131ba81eb4ef200bd41b2c46a241e71099f370b99d0fc83623"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#204-275) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#242)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#264)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L204-L275) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L242)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L264)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 275
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4cb35ca2c0908489e42a2323d54743d20f672fa6e76e6ce78a045382ba3ad786"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#204-275) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#242)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#266)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L204-L275) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L242)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L266)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 275
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "60ad34e4eeaf9be8431735326a047c2e4f456879271036cbffc3479b329b7c16"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.invMod(uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#315-361) performs a multiplication on the result of a division:\n\t- quotient = gcd / remainder (node_modules/@openzeppelin/contracts/utils/math/Math.sol#337)\n\t- (gcd,remainder) = (remainder,gcd - remainder * quotient) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#339-346)\n",
            "markdown": "[Math.invMod(uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L315-L361) performs a multiplication on the result of a division:\n\t- [quotient = gcd / remainder](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L337)\n\t- [(gcd,remainder) = (remainder,gcd - remainder * quotient)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L339-L346)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 315,
                  "endLine": 361
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8942d09312126f44013988cc108ac45ba34577923cb67635312b8c71c04f4fe7"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#204-275) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#242)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#262)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L204-L275) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L242)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L262)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 275
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c441bddd6a4f9b67a2832342503f73b68a124a376c8a3703246526f3efba6261"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#204-275) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#242)\n\t- inverse = (3 * denominator) ^ 2 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#257)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L204-L275) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L242)\n\t- [inverse = (3 * denominator) ^ 2](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L257)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 275
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cbf56b3b7d31837c4f3943e7e8415e9bdbfbfd12e6233ab5aaef7bc041b1a8cb"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#204-275) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#242)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#263)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L204-L275) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L242)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L263)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 275
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d5bd28d0e83d49dc7bb8cfab1f39fb57d25a1bc4fa100e68e948ec895b2ff827"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#204-275) performs a multiplication on the result of a division:\n\t- low = low / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#245)\n\t- result = low * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#272)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L204-L275) performs a multiplication on the result of a division:\n\t- [low = low / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L245)\n\t- [result = low * inverse](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L272)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 275
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d5d38534b31e47c09beab2a0538b7455f1cadbe95c1ed3c895652ff6a78f0e87"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "PriceOracle.getTokenPriceInFiat(address,string,uint256) (contracts/PriceOracle.sol#264-277) uses a dangerous strict equality:\n\t- fiatPriceUSD == 0 (contracts/PriceOracle.sol#272)\n",
            "markdown": "[PriceOracle.getTokenPriceInFiat(address,string,uint256)](contracts/PriceOracle.sol#L264-L277) uses a dangerous strict equality:\n\t- [fiatPriceUSD == 0](contracts/PriceOracle.sol#L272)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 264,
                  "endLine": 277
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "55ff4b15485162e632155ce1d8c63c9049ef8b8bfdabcd48ddd76ac48d059cb8"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "Trade.removeArbitratorFromCurrency(address,string) (contracts/Trade.sol#767-796) uses a dangerous strict equality:\n\t- arbitratorInfo[_arbitrator].joinedAt == 0 (contracts/Trade.sol#775)\n",
            "markdown": "[Trade.removeArbitratorFromCurrency(address,string)](contracts/Trade.sol#L767-L796) uses a dangerous strict equality:\n\t- [arbitratorInfo[_arbitrator].joinedAt == 0](contracts/Trade.sol#L775)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 767,
                  "endLine": 796
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "679cfd37574a2f95d362f28948f0fa482b12da804f08bda1a3e8bb9b1b8c758b"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "Trade.deactivateArbitrator(address) (contracts/Trade.sol#802-810) uses a dangerous strict equality:\n\t- arbitratorInfo[_arbitrator].joinedAt == 0 (contracts/Trade.sol#805)\n",
            "markdown": "[Trade.deactivateArbitrator(address)](contracts/Trade.sol#L802-L810) uses a dangerous strict equality:\n\t- [arbitratorInfo[_arbitrator].joinedAt == 0](contracts/Trade.sol#L805)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 802,
                  "endLine": 810
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7aefbc0a999e55a58dbf1cd378d0bcb2ec5f833397956f8cac0a1e8768646d15"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "Profile.getReputationScore(address) (contracts/Profile.sol#270-279) uses a dangerous strict equality:\n\t- totalTrades == 0 (contracts/Profile.sol#274)\n",
            "markdown": "[Profile.getReputationScore(address)](contracts/Profile.sol#L270-L279) uses a dangerous strict equality:\n\t- [totalTrades == 0](contracts/Profile.sol#L274)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 270,
                  "endLine": 279
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9e77edaabd59874607b3ff0599367508b4219e194e8d003746d9ad90f97dce19"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "Offer.getUserActiveOfferCount(address) (contracts/Offer.sol#71-82) uses a dangerous strict equality:\n\t- _offers[userOfferIds[i]].state == OfferState.Active (contracts/Offer.sol#76)\n",
            "markdown": "[Offer.getUserActiveOfferCount(address)](contracts/Offer.sol#L71-L82) uses a dangerous strict equality:\n\t- [_offers[userOfferIds[i]].state == OfferState.Active](contracts/Offer.sol#L76)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 82
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f91d4e40e6efe5f522ec2c976821b091894b2396dc7ba52071b5068b30445cc1"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ERC1967Utils.upgradeBeaconToAndCall(address,bytes) (node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol#157-166) ignores return value by Address.functionDelegateCall(IBeacon(newBeacon).implementation(),data) (node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol#162)\n",
            "markdown": "[ERC1967Utils.upgradeBeaconToAndCall(address,bytes)](node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol#L157-L166) ignores return value by [Address.functionDelegateCall(IBeacon(newBeacon).implementation(),data)](node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol#L162)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol"
                },
                "region": {
                  "startLine": 157,
                  "endLine": 166
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9397150246365ddb188f0b11d6fe2285bc8cc68861fd886ea0d13d31437483bb"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ERC1967Utils.upgradeToAndCall(address,bytes) (node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol#67-76) ignores return value by Address.functionDelegateCall(newImplementation,data) (node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol#72)\n",
            "markdown": "[ERC1967Utils.upgradeToAndCall(address,bytes)](node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol#L67-L76) ignores return value by [Address.functionDelegateCall(newImplementation,data)](node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol#L72)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 76
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a4b446a9606d8650a689a87a3e14771c29610b360c17f06621a497160e571227"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "Offer.createOffer(IOffer.OfferType,string,address,uint256,uint256,uint256,string) (contracts/Offer.sol#95-152) ignores return value by _activeOfferIds.add(offerId) (contracts/Offer.sol#139)\n",
            "markdown": "[Offer.createOffer(IOffer.OfferType,string,address,uint256,uint256,uint256,string)](contracts/Offer.sol#L95-L152) ignores return value by [_activeOfferIds.add(offerId)](contracts/Offer.sol#L139)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 95,
                  "endLine": 152
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a7c5dbc4d2f1e6861462af8d32d27cbdd23e6154975a26da4d1f46eac94c17d9"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "PriceOracle._getChainlinkPrice(address) (contracts/PriceOracle.sol#390-410) ignores return value by (None,price,None,updatedAt,None) = priceFeed.latestRoundData() (contracts/PriceOracle.sol#393)\n",
            "markdown": "[PriceOracle._getChainlinkPrice(address)](contracts/PriceOracle.sol#L390-L410) ignores return value by [(None,price,None,updatedAt,None) = priceFeed.latestRoundData()](contracts/PriceOracle.sol#L393)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 390,
                  "endLine": 410
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c68678208a3a522a0cc10d77739bd7f9de42e6d8a148c3d1c6de2e126e635879"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "PriceOracle._getUniswapPrice(address,PriceOracle.PriceRoute) (contracts/PriceOracle.sol#418-460) ignores return value by (sqrtPriceX96) = IUniswapV3Pool(poolAddress).slot0() (contracts/PriceOracle.sol#440-459)\n",
            "markdown": "[PriceOracle._getUniswapPrice(address,PriceOracle.PriceRoute)](contracts/PriceOracle.sol#L418-L460) ignores return value by [(sqrtPriceX96) = IUniswapV3Pool(poolAddress).slot0()](contracts/PriceOracle.sol#L440-L459)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 418,
                  "endLine": 460
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cb8687f604028f3ab91f537cd4a0a3655c9d317fcfab164ec6e81b31d124f8a3"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "Offer._updateOfferIndexes(uint256,IOffer.OfferState,IOffer.OfferState) (contracts/Offer.sol#436-447) ignores return value by _activeOfferIds.remove(_offerId) (contracts/Offer.sol#442)\n",
            "markdown": "[Offer._updateOfferIndexes(uint256,IOffer.OfferState,IOffer.OfferState)](contracts/Offer.sol#L436-L447) ignores return value by [_activeOfferIds.remove(_offerId)](contracts/Offer.sol#L442)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 436,
                  "endLine": 447
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d93206f1e25e6f8d3e16ab6b955823287196c137f4d31b866d90a2d56efca380"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "Offer._updateOfferIndexes(uint256,IOffer.OfferState,IOffer.OfferState) (contracts/Offer.sol#436-447) ignores return value by _activeOfferIds.add(_offerId) (contracts/Offer.sol#445)\n",
            "markdown": "[Offer._updateOfferIndexes(uint256,IOffer.OfferState,IOffer.OfferState)](contracts/Offer.sol#L436-L447) ignores return value by [_activeOfferIds.add(_offerId)](contracts/Offer.sol#L445)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 436,
                  "endLine": 447
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ee307cae4ce7dc75c2abef8e60355d0e4d7fab6779e35ffe735e623a770cf380"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "MockERC20.constructor(string,string,uint8).symbol (contracts/MockERC20.sol#16) shadows:\n\t- ERC20.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#60-62) (function)\n\t- IERC20Metadata.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#20) (function)\n",
            "markdown": "[MockERC20.constructor(string,string,uint8).symbol](contracts/MockERC20.sol#L16) shadows:\n\t- [ERC20.symbol()](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L60-L62) (function)\n\t- [IERC20Metadata.symbol()](node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#L20) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/MockERC20.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6522286aff9617cb8ce8c5c8efc6db712671e005f7decf5e02931a38b46f61cf"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "MockERC20.constructor(string,string,uint8).name (contracts/MockERC20.sol#15) shadows:\n\t- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#52-54) (function)\n\t- IERC20Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#15) (function)\n",
            "markdown": "[MockERC20.constructor(string,string,uint8).name](contracts/MockERC20.sol#L15) shadows:\n\t- [ERC20.name()](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L52-L54) (function)\n\t- [IERC20Metadata.name()](node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#L15) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/MockERC20.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9912beeaa129b65cc7d48206ccd8d66e9f0fbcbf5ac48a20992f9099225e5f0c"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in Trade._requestRandomArbitrator(uint256,string) (contracts/Trade.sol#1104-1137):\n\tExternal calls:\n\t- requestId = vrfCoordinator.requestRandomWords(vrfKeyHash,vrfSubscriptionId,vrfRequestConfirmations,vrfCallbackGasLimit,vrfNumWords) (contracts/Trade.sol#1120-1126)\n\tState variables written after the call(s):\n\t- vrfRequests[requestId] = VRFRequest({tradeId:_tradeId,fiatCurrency:_fiatCurrency,requestedAt:block.timestamp,fulfilled:false}) (contracts/Trade.sol#1129-1134)\n",
            "markdown": "Reentrancy in [Trade._requestRandomArbitrator(uint256,string)](contracts/Trade.sol#L1104-L1137):\n\tExternal calls:\n\t- [requestId = vrfCoordinator.requestRandomWords(vrfKeyHash,vrfSubscriptionId,vrfRequestConfirmations,vrfCallbackGasLimit,vrfNumWords)](contracts/Trade.sol#L1120-L1126)\n\tState variables written after the call(s):\n\t- [vrfRequests[requestId] = VRFRequest({tradeId:_tradeId,fiatCurrency:_fiatCurrency,requestedAt:block.timestamp,fulfilled:false})](contracts/Trade.sol#L1129-L1134)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 1104,
                  "endLine": 1137
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3fdfc7b248403c808c4900f336d8fd96c2181fd0bcce1c7343405391a4492a62"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in Trade.cancelTrade(uint256) (contracts/Trade.sol#432-468):\n\tExternal calls:\n\t- _transfer(trade.tokenAddress,trade.seller,escrowAmount) (contracts/Trade.sol#452)\n\t\t- (success,None) = _to.call{value: _amount}() (contracts/Trade.sol#915)\n\t- profileContract.updateActiveTrades(trade.buyer,- 1) (contracts/Trade.sol#458)\n\t- profileContract.updateActiveTrades(trade.seller,- 1) (contracts/Trade.sol#459)\n\tExternal calls sending eth:\n\t- _transfer(trade.tokenAddress,trade.seller,escrowAmount) (contracts/Trade.sol#452)\n\t\t- (success,None) = _to.call{value: _amount}() (contracts/Trade.sol#915)\n\tState variables written after the call(s):\n\t- _recordStateTransition(_tradeId,currentState,newState) (contracts/Trade.sol#462)\n\t\t- tradeHistory[_tradeId].push(StateTransitionRecord({fromState:_from,toState:_to,timestamp:block.timestamp,actor:msg.sender})) (contracts/Trade.sol#896-901)\n",
            "markdown": "Reentrancy in [Trade.cancelTrade(uint256)](contracts/Trade.sol#L432-L468):\n\tExternal calls:\n\t- [_transfer(trade.tokenAddress,trade.seller,escrowAmount)](contracts/Trade.sol#L452)\n\t\t- [(success,None) = _to.call{value: _amount}()](contracts/Trade.sol#L915)\n\t- [profileContract.updateActiveTrades(trade.buyer,- 1)](contracts/Trade.sol#L458)\n\t- [profileContract.updateActiveTrades(trade.seller,- 1)](contracts/Trade.sol#L459)\n\tExternal calls sending eth:\n\t- [_transfer(trade.tokenAddress,trade.seller,escrowAmount)](contracts/Trade.sol#L452)\n\t\t- [(success,None) = _to.call{value: _amount}()](contracts/Trade.sol#L915)\n\tState variables written after the call(s):\n\t- [_recordStateTransition(_tradeId,currentState,newState)](contracts/Trade.sol#L462)\n\t\t- [tradeHistory[_tradeId].push(StateTransitionRecord({fromState:_from,toState:_to,timestamp:block.timestamp,actor:msg.sender}))](contracts/Trade.sol#L896-L901)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 432,
                  "endLine": 468
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9a4b61d6277c5d124d12c6237fd75ca276a7eaf3959086cfdb53614b0e9e486a"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in Trade.releaseEscrow(uint256) (contracts/Trade.sol#390-426):\n\tExternal calls:\n\t- _transfer(trade.tokenAddress,trade.buyer,buyerAmount) (contracts/Trade.sol#411)\n\t\t- (success,None) = _to.call{value: _amount}() (contracts/Trade.sol#915)\n\t- _distributeFees(trade.tokenAddress,fees) (contracts/Trade.sol#414)\n\t\t- ILocalToken(_config.localTokenAddress).burn(_amount) (contracts/Trade.sol#967)\n\t\t- (success,None) = _to.call{value: _amount}() (contracts/Trade.sol#915)\n\t\t- this._performSwapAndBurn(_fromToken,_amount,_config.localTokenAddress,_config.swapRouter) (contracts/Trade.sol#979-990)\n\t- profileContract.updateActiveTrades(trade.buyer,- 1) (contracts/Trade.sol#417)\n\t- profileContract.updateActiveTrades(trade.seller,- 1) (contracts/Trade.sol#418)\n\t- profileContract.updateTradeCount(trade.buyer,true) (contracts/Trade.sol#419)\n\t- profileContract.updateTradeCount(trade.seller,true) (contracts/Trade.sol#420)\n\tExternal calls sending eth:\n\t- _transfer(trade.tokenAddress,trade.buyer,buyerAmount) (contracts/Trade.sol#411)\n\t\t- (success,None) = _to.call{value: _amount}() (contracts/Trade.sol#915)\n\t- _distributeFees(trade.tokenAddress,fees) (contracts/Trade.sol#414)\n\t\t- (success,None) = _to.call{value: _amount}() (contracts/Trade.sol#915)\n\tState variables written after the call(s):\n\t- _recordStateTransition(_tradeId,TradeState.FiatDeposited,TradeState.EscrowReleased) (contracts/Trade.sol#423)\n\t\t- tradeHistory[_tradeId].push(StateTransitionRecord({fromState:_from,toState:_to,timestamp:block.timestamp,actor:msg.sender})) (contracts/Trade.sol#896-901)\n",
            "markdown": "Reentrancy in [Trade.releaseEscrow(uint256)](contracts/Trade.sol#L390-L426):\n\tExternal calls:\n\t- [_transfer(trade.tokenAddress,trade.buyer,buyerAmount)](contracts/Trade.sol#L411)\n\t\t- [(success,None) = _to.call{value: _amount}()](contracts/Trade.sol#L915)\n\t- [_distributeFees(trade.tokenAddress,fees)](contracts/Trade.sol#L414)\n\t\t- [ILocalToken(_config.localTokenAddress).burn(_amount)](contracts/Trade.sol#L967)\n\t\t- [(success,None) = _to.call{value: _amount}()](contracts/Trade.sol#L915)\n\t\t- [this._performSwapAndBurn(_fromToken,_amount,_config.localTokenAddress,_config.swapRouter)](contracts/Trade.sol#L979-L990)\n\t- [profileContract.updateActiveTrades(trade.buyer,- 1)](contracts/Trade.sol#L417)\n\t- [profileContract.updateActiveTrades(trade.seller,- 1)](contracts/Trade.sol#L418)\n\t- [profileContract.updateTradeCount(trade.buyer,true)](contracts/Trade.sol#L419)\n\t- [profileContract.updateTradeCount(trade.seller,true)](contracts/Trade.sol#L420)\n\tExternal calls sending eth:\n\t- [_transfer(trade.tokenAddress,trade.buyer,buyerAmount)](contracts/Trade.sol#L411)\n\t\t- [(success,None) = _to.call{value: _amount}()](contracts/Trade.sol#L915)\n\t- [_distributeFees(trade.tokenAddress,fees)](contracts/Trade.sol#L414)\n\t\t- [(success,None) = _to.call{value: _amount}()](contracts/Trade.sol#L915)\n\tState variables written after the call(s):\n\t- [_recordStateTransition(_tradeId,TradeState.FiatDeposited,TradeState.EscrowReleased)](contracts/Trade.sol#L423)\n\t\t- [tradeHistory[_tradeId].push(StateTransitionRecord({fromState:_from,toState:_to,timestamp:block.timestamp,actor:msg.sender}))](contracts/Trade.sol#L896-L901)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 390,
                  "endLine": 426
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c5bfca4e4e6f1b4b348942da3412b559c49cadb4f2f7ef02e98cde5c4515e559"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in Trade.refundExpiredTrade(uint256) (contracts/Trade.sol#474-504):\n\tExternal calls:\n\t- _transfer(trade.tokenAddress,trade.seller,escrowAmount) (contracts/Trade.sol#493)\n\t\t- (success,None) = _to.call{value: _amount}() (contracts/Trade.sol#915)\n\t- profileContract.updateActiveTrades(trade.buyer,- 1) (contracts/Trade.sol#496)\n\t- profileContract.updateActiveTrades(trade.seller,- 1) (contracts/Trade.sol#497)\n\tExternal calls sending eth:\n\t- _transfer(trade.tokenAddress,trade.seller,escrowAmount) (contracts/Trade.sol#493)\n\t\t- (success,None) = _to.call{value: _amount}() (contracts/Trade.sol#915)\n\tState variables written after the call(s):\n\t- _recordStateTransition(_tradeId,TradeState.EscrowFunded,TradeState.EscrowRefunded) (contracts/Trade.sol#500)\n\t\t- tradeHistory[_tradeId].push(StateTransitionRecord({fromState:_from,toState:_to,timestamp:block.timestamp,actor:msg.sender})) (contracts/Trade.sol#896-901)\n",
            "markdown": "Reentrancy in [Trade.refundExpiredTrade(uint256)](contracts/Trade.sol#L474-L504):\n\tExternal calls:\n\t- [_transfer(trade.tokenAddress,trade.seller,escrowAmount)](contracts/Trade.sol#L493)\n\t\t- [(success,None) = _to.call{value: _amount}()](contracts/Trade.sol#L915)\n\t- [profileContract.updateActiveTrades(trade.buyer,- 1)](contracts/Trade.sol#L496)\n\t- [profileContract.updateActiveTrades(trade.seller,- 1)](contracts/Trade.sol#L497)\n\tExternal calls sending eth:\n\t- [_transfer(trade.tokenAddress,trade.seller,escrowAmount)](contracts/Trade.sol#L493)\n\t\t- [(success,None) = _to.call{value: _amount}()](contracts/Trade.sol#L915)\n\tState variables written after the call(s):\n\t- [_recordStateTransition(_tradeId,TradeState.EscrowFunded,TradeState.EscrowRefunded)](contracts/Trade.sol#L500)\n\t\t- [tradeHistory[_tradeId].push(StateTransitionRecord({fromState:_from,toState:_to,timestamp:block.timestamp,actor:msg.sender}))](contracts/Trade.sol#L896-L901)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 474,
                  "endLine": 504
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f0d6ced7dc448564e5498d8fa901e16830816c1af25cf18aac8d89ee3446e8d5"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Offer.archiveOffer(uint256) (contracts/Offer.sol#261-282):\n\tExternal calls:\n\t- profile.updateActiveOffers(msg.sender,- 1) (contracts/Offer.sol#277)\n\tEvent emitted after the call(s):\n\t- OfferArchived(_offerId,msg.sender) (contracts/Offer.sol#280)\n\t- OfferStateChanged(_offerId,oldState,OfferState.Archived) (contracts/Offer.sol#281)\n",
            "markdown": "Reentrancy in [Offer.archiveOffer(uint256)](contracts/Offer.sol#L261-L282):\n\tExternal calls:\n\t- [profile.updateActiveOffers(msg.sender,- 1)](contracts/Offer.sol#L277)\n\tEvent emitted after the call(s):\n\t- [OfferArchived(_offerId,msg.sender)](contracts/Offer.sol#L280)\n\t- [OfferStateChanged(_offerId,oldState,OfferState.Archived)](contracts/Offer.sol#L281)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 261,
                  "endLine": 282
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1bf1280e5ea96e04ec8d3bb084f8b6cb1e8630642d220c76f5145266648c4f85"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Trade._performSwapAndBurn(address,uint256,address,address) (contracts/Trade.sol#1000-1037):\n\tExternal calls:\n\t- amountOut = swapRouter.exactInputSingle(params) (contracts/Trade.sol#1028)\n\t- ILocalToken(_localToken).burn(amountOut) (contracts/Trade.sol#1031)\n\tEvent emitted after the call(s):\n\t- TokensBurned(_fromToken,_localToken,_amount,amountOut) (contracts/Trade.sol#1034)\n",
            "markdown": "Reentrancy in [Trade._performSwapAndBurn(address,uint256,address,address)](contracts/Trade.sol#L1000-L1037):\n\tExternal calls:\n\t- [amountOut = swapRouter.exactInputSingle(params)](contracts/Trade.sol#L1028)\n\t- [ILocalToken(_localToken).burn(amountOut)](contracts/Trade.sol#L1031)\n\tEvent emitted after the call(s):\n\t- [TokensBurned(_fromToken,_localToken,_amount,amountOut)](contracts/Trade.sol#L1034)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 1000,
                  "endLine": 1037
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "432a250fd57eeadf776ab8384656caa367204e973742d2f540a5628d9fdc14a9"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "Offer._offerExists(uint256) (contracts/Offer.sol#411-413) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- _offerId > 0 && _offerId < nextOfferId && _offers[_offerId].owner != address(0) (contracts/Offer.sol#412)\n",
            "markdown": "[Offer._offerExists(uint256)](contracts/Offer.sol#L411-L413) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [_offerId > 0 && _offerId < nextOfferId && _offers[_offerId].owner != address(0)](contracts/Offer.sol#L412)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 411,
                  "endLine": 413
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "09770a3777dd3dfae420d99ad313c2d292ba64a659c0ecd8acaeff60b2f737ab"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "Trade.deactivateArbitrator(address) (contracts/Trade.sol#802-810) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- arbitratorInfo[_arbitrator].joinedAt == 0 (contracts/Trade.sol#805)\n",
            "markdown": "[Trade.deactivateArbitrator(address)](contracts/Trade.sol#L802-L810) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [arbitratorInfo[_arbitrator].joinedAt == 0](contracts/Trade.sol#L805)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 802,
                  "endLine": 810
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0fce17ea92a57fddfeb10a4e0138844c4c7a9d5c264a077420813a13dc150f62"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "PriceOracle.getTokenPriceInFiat(address,string,uint256) (contracts/PriceOracle.sol#264-277) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- fiatPriceUSD == 0 (contracts/PriceOracle.sol#272)\n",
            "markdown": "[PriceOracle.getTokenPriceInFiat(address,string,uint256)](contracts/PriceOracle.sol#L264-L277) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [fiatPriceUSD == 0](contracts/PriceOracle.sol#L272)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 264,
                  "endLine": 277
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2a74901353477c4ee95cb62772802fbadf0dfae6f7f45a43ad79ad650cef2a54"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "PriceOracle.isPriceValid(string) (contracts/PriceOracle.sol#534-541) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > priceData.updatedAt + MAX_PRICE_AGE (contracts/PriceOracle.sol#538)\n",
            "markdown": "[PriceOracle.isPriceValid(string)](contracts/PriceOracle.sol#L534-L541) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [block.timestamp > priceData.updatedAt + MAX_PRICE_AGE](contracts/PriceOracle.sol#L538)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 534,
                  "endLine": 541
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2e1b610f390331f455954da7e84b0651d8d7af6d3e4db3fc9dda71f610947141"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "PriceOracle.getFiatPrice(string) (contracts/PriceOracle.sol#284-300) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > priceData.updatedAt + MAX_PRICE_AGE (contracts/PriceOracle.sol#295)\n",
            "markdown": "[PriceOracle.getFiatPrice(string)](contracts/PriceOracle.sol#L284-L300) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [block.timestamp > priceData.updatedAt + MAX_PRICE_AGE](contracts/PriceOracle.sol#L295)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 284,
                  "endLine": 300
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "356b6de39dd0d274e2ca18e86705d16ee481fe44539e0e12aa93ce04f631e0c5"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "Profile.canCreateOffer(address) (contracts/Profile.sol#286-291) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- profile.activeOffers < config.maxActiveOffers (contracts/Profile.sol#290)\n",
            "markdown": "[Profile.canCreateOffer(address)](contracts/Profile.sol#L286-L291) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [profile.activeOffers < config.maxActiveOffers](contracts/Profile.sol#L290)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 286,
                  "endLine": 291
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "35d5709fa9413f99bc70e3aebbeea5a40266d256b216ce01eb5e05b2cec0a900"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "Offer.getUserActiveOfferCount(address) (contracts/Offer.sol#71-82) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- _offers[userOfferIds[i]].state == OfferState.Active (contracts/Offer.sol#76)\n",
            "markdown": "[Offer.getUserActiveOfferCount(address)](contracts/Offer.sol#L71-L82) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [_offers[userOfferIds[i]].state == OfferState.Active](contracts/Offer.sol#L76)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 82
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4543642fef0c32d2a0df84014ce520af3bbe529cfd6d9434e91a0b2e86b93d02"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "Profile.canCreateTrade(address) (contracts/Profile.sol#298-303) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- profile.activeTrades < config.maxActiveTrades (contracts/Profile.sol#302)\n",
            "markdown": "[Profile.canCreateTrade(address)](contracts/Profile.sol#L298-L303) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [profile.activeTrades < config.maxActiveTrades](contracts/Profile.sol#L302)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 298,
                  "endLine": 303
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "529f76ac13b482b178a1e649c6d76f96cb07233847fd5e08fcd5bb4b32380fb7"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "Trade.disputeTrade(uint256,string) (contracts/Trade.sol#513-566) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > trade.disputeDeadline (contracts/Trade.sol#537)\n",
            "markdown": "[Trade.disputeTrade(uint256,string)](contracts/Trade.sol#L513-L566) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [block.timestamp > trade.disputeDeadline](contracts/Trade.sol#L537)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 513,
                  "endLine": 566
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "570a1421ac453c08ddcd2b7b9efbb1e00794c559bffdd8d19d9c69137c0a6c98"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "Profile.getReputationScore(address) (contracts/Profile.sol#270-279) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- totalTrades == 0 (contracts/Profile.sol#274)\n",
            "markdown": "[Profile.getReputationScore(address)](contracts/Profile.sol#L270-L279) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [totalTrades == 0](contracts/Profile.sol#L274)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 270,
                  "endLine": 279
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "58353c4839af5361f04c40878a62229dba838100751a483b9e077d9fa8287093"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "PriceOracle.getCachedTokenPrice(address) (contracts/PriceOracle.sol#243-255) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > cachedPrice.updatedAt + MAX_PRICE_AGE (contracts/PriceOracle.sol#251)\n",
            "markdown": "[PriceOracle.getCachedTokenPrice(address)](contracts/PriceOracle.sol#L243-L255) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [block.timestamp > cachedPrice.updatedAt + MAX_PRICE_AGE](contracts/PriceOracle.sol#L251)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 243,
                  "endLine": 255
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5d0605ba6c69e7639e4356c9273c81d6b457131275744c3c239a40816cb1c727"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "PriceOracle.isTokenPriceValid(address) (contracts/PriceOracle.sol#307-314) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > priceData.updatedAt + MAX_PRICE_AGE (contracts/PriceOracle.sol#311)\n",
            "markdown": "[PriceOracle.isTokenPriceValid(address)](contracts/PriceOracle.sol#L307-L314) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [block.timestamp > priceData.updatedAt + MAX_PRICE_AGE](contracts/PriceOracle.sol#L311)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 307,
                  "endLine": 314
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8857e1d747b424f2f0442e9f6de3f7e4056c1f804bb0ff21a29a5c7232c2bd5d"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "Trade._transfer(address,address,uint256) (contracts/Trade.sol#912-921) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(success,ETH transfer failed) (contracts/Trade.sol#916)\n",
            "markdown": "[Trade._transfer(address,address,uint256)](contracts/Trade.sol#L912-L921) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool,string)(success,ETH transfer failed)](contracts/Trade.sol#L916)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 912,
                  "endLine": 921
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8db509b13e19fc1ed745d2598248cc58d6983c855a6947a29a927b84bff8e673"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "Trade.refundExpiredTrade(uint256) (contracts/Trade.sol#474-504) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp <= trade.expiresAt (contracts/Trade.sol#481)\n",
            "markdown": "[Trade.refundExpiredTrade(uint256)](contracts/Trade.sol#L474-L504) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [block.timestamp <= trade.expiresAt](contracts/Trade.sol#L481)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 474,
                  "endLine": 504
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a646a8d2b6dfe0e5844350fc905777b1f7570181aee49979b45157c999af9bfa"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "PriceOracle._getTokenPriceInUSD(address) (contracts/PriceOracle.sol#358-383) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- cachedPrice.isValid && block.timestamp <= cachedPrice.updatedAt + MAX_PRICE_AGE (contracts/PriceOracle.sol#361-362)\n",
            "markdown": "[PriceOracle._getTokenPriceInUSD(address)](contracts/PriceOracle.sol#L358-L383) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [cachedPrice.isValid && block.timestamp <= cachedPrice.updatedAt + MAX_PRICE_AGE](contracts/PriceOracle.sol#L361-L362)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 358,
                  "endLine": 383
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "abe31893eaa698d639e3369b54eac9e540423829cd8867b7d5e1707793086d2a"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "PriceOracle.getTokenPriceAge(address) (contracts/PriceOracle.sol#321-327) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > priceData.updatedAt (contracts/PriceOracle.sol#325-326)\n",
            "markdown": "[PriceOracle.getTokenPriceAge(address)](contracts/PriceOracle.sol#L321-L327) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [block.timestamp > priceData.updatedAt](contracts/PriceOracle.sol#L325-L326)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 321,
                  "endLine": 327
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c250f2ba0cb8a621de1705a2fd44cccb9f84516cd3f5c8f9430d744e8a324521"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "PriceOracle.getPriceAge(string) (contracts/PriceOracle.sol#543-549) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > priceData.updatedAt (contracts/PriceOracle.sol#547-548)\n",
            "markdown": "[PriceOracle.getPriceAge(string)](contracts/PriceOracle.sol#L543-L549) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [block.timestamp > priceData.updatedAt](contracts/PriceOracle.sol#L547-L548)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 543,
                  "endLine": 549
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d3257e07f585918452a4bfa7735482efb642c616d5f53e10a340db66de5bd453"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "PriceOracle._getChainlinkPrice(address) (contracts/PriceOracle.sol#390-410) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > updatedAt + MAX_PRICE_AGE (contracts/PriceOracle.sol#396)\n",
            "markdown": "[PriceOracle._getChainlinkPrice(address)](contracts/PriceOracle.sol#L390-L410) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [block.timestamp > updatedAt + MAX_PRICE_AGE](contracts/PriceOracle.sol#L396)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 390,
                  "endLine": 410
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d3c8afeb65d125cb575e83458ca9636a47567d5dbd322e61116ca5f2058ce921"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "TradeUtils.isExpired(uint256) (contracts/libraries/TradeUtils.sol#75-77) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > expiresAt (contracts/libraries/TradeUtils.sol#76)\n",
            "markdown": "[TradeUtils.isExpired(uint256)](contracts/libraries/TradeUtils.sol#L75-L77) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [block.timestamp > expiresAt](contracts/libraries/TradeUtils.sol#L76)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/TradeUtils.sol"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 77
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d7d0813ebfc86eda6b5538e9dc85466881d28c6bc755316616087b93a0770255"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "Trade.removeArbitratorFromCurrency(address,string) (contracts/Trade.sol#767-796) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- arbitratorInfo[_arbitrator].joinedAt == 0 (contracts/Trade.sol#775)\n",
            "markdown": "[Trade.removeArbitratorFromCurrency(address,string)](contracts/Trade.sol#L767-L796) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [arbitratorInfo[_arbitrator].joinedAt == 0](contracts/Trade.sol#L775)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 767,
                  "endLine": 796
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e14397bdde5a75ddd06cd07b2678612ea80e4b30694c1befb72bf3ce117233d3"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "Profile.profileExists(address) (contracts/Profile.sol#238-240) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- _profiles[_user].createdAt > 0 (contracts/Profile.sol#239)\n",
            "markdown": "[Profile.profileExists(address)](contracts/Profile.sol#L238-L240) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [_profiles[_user].createdAt > 0](contracts/Profile.sol#L239)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 238,
                  "endLine": 240
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f103a7d7451cbe5b5f91f53f3ec57c9f3a380a581d79e66932c1825d4c035c3b"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SafeCast.toUint(bool) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#1157-1161) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#1158-1160)\n",
            "markdown": "[SafeCast.toUint(bool)](node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#L1157-L1161) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#L1158-L1160)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol"
                },
                "region": {
                  "startLine": 1157,
                  "endLine": 1161
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "02f5259e080856d63e5545d201ae538dd6b493b8f5a09e4287364c8b9a650872"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getAddressSlot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#66-70) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#67-69)\n",
            "markdown": "[StorageSlot.getAddressSlot(bytes32)](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L66-L70) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L67-L69)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 70
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "054be2726c041e3fb58c31a34494cdcecaeaee608fbdb1976c6606f26d6559fd"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SlotDerivation.erc7201Slot(string) (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#45-50) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#46-49)\n",
            "markdown": "[SlotDerivation.erc7201Slot(string)](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L45-L50) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L46-L49)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 50
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0cc36b90c9760d55d81b04c479bd3447d5e01b27194e594d684ac050c6fba2eb"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeAccess(address[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#383-389) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#385-387)\n",
            "markdown": "[Arrays.unsafeAccess(address[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L383-L389) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L385-L387)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 383,
                  "endLine": 389
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0d596a39e1a8062605ec62b673b01f7543fa38187283e1a764f124d759072937"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Initializable._getInitializableStorage() (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#232-237) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#234-236)\n",
            "markdown": "[Initializable._getInitializableStorage()](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#L232-L237) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#L234-L236)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol"
                },
                "region": {
                  "startLine": 232,
                  "endLine": 237
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1f8fdde65aa5d08a9c0d5f63754517922f432131e3a747c042f3f0b4b8a9b1e3"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getUint256Slot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#93-97) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#94-96)\n",
            "markdown": "[StorageSlot.getUint256Slot(bytes32)](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L93-L97) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L94-L96)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol"
                },
                "region": {
                  "startLine": 93,
                  "endLine": 97
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "264c3ea2ec5f81f48f40bc32de2e71f4534bc537579c0899d8e1bc23ed94c652"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeAccess(string[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#435-441) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#437-439)\n",
            "markdown": "[Arrays.unsafeAccess(string[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L435-L441) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L437-L439)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 435,
                  "endLine": 441
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "26c820a5bb1d8fa3dc1efbedc51bb0416221f66c649ab5da8ea32fd870c5cca5"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SafeERC20._callOptionalReturnBool(IERC20,bytes) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#201-211) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#205-209)\n",
            "markdown": "[SafeERC20._callOptionalReturnBool(IERC20,bytes)](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L201-L211) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L205-L209)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"
                },
                "region": {
                  "startLine": 201,
                  "endLine": 211
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2d1928acc36ad4243b0ab5c5517e9d6f6fd6ac46675a53bbe016b31ae8035cc2"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "EnumerableSet.values(EnumerableSet.UintSet,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#498-507) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#502-504)\n",
            "markdown": "[EnumerableSet.values(EnumerableSet.UintSet,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#L498-L507) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#L502-L504)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol"
                },
                "region": {
                  "startLine": 498,
                  "endLine": 507
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "375f8630dd3e1b2fcda6e2b70da01d8cd1b7494d28b7e13b8816a5ee5db070d0"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "EnumerableSet.values(EnumerableSet.Bytes32Set,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#294-303) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#298-300)\n",
            "markdown": "[EnumerableSet.values(EnumerableSet.Bytes32Set,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#L294-L303) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#L298-L300)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol"
                },
                "region": {
                  "startLine": 294,
                  "endLine": 303
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "37bf1038f7cec34d7a48e31fb247d6c3d4c7f9ec8889750caa9e92bbe94eab6d"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Math.tryModExp(bytes,bytes,bytes) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#449-471) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#461-470)\n",
            "markdown": "[Math.tryModExp(bytes,bytes,bytes)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L449-L471) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L461-L470)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 449,
                  "endLine": 471
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3eb2bdc28e6c136822fd1d75045a31216595acdd47b75327d329c4a089f46ad6"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeAccess(uint256[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#409-415) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#411-413)\n",
            "markdown": "[Arrays.unsafeAccess(uint256[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L409-L415) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L411-L413)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 409,
                  "endLine": 415
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "459b38699aab3616afd86ee1678ff0adc978b6a51c4a8abac09ee024e956b7a9"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SlotDerivation.deriveMapping(bytes32,bool) (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#85-91) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#86-90)\n",
            "markdown": "[SlotDerivation.deriveMapping(bytes32,bool)](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L85-L91) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L86-L90)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 91
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4aaa23470099551a0a42dcdbb357259a194c4f3e6c997bdf4e917930c4931418"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SlotDerivation.deriveMapping(bytes32,bytes) (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#144-154) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#145-153)\n",
            "markdown": "[SlotDerivation.deriveMapping(bytes32,bytes)](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L144-L154) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L145-L153)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol"
                },
                "region": {
                  "startLine": 144,
                  "endLine": 154
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4d15b18e25664353eb1557913389e6fc04a9a1a6ff0d5d9c6c91a0055f48dfe9"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "EnumerableSet.values(EnumerableSet.Bytes32Set) (node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#275-284) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#279-281)\n",
            "markdown": "[EnumerableSet.values(EnumerableSet.Bytes32Set)](node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#L275-L284) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#L279-L281)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol"
                },
                "region": {
                  "startLine": 275,
                  "endLine": 284
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4e03e0700188d300875c1e2089db7673cef7e99e445c9af123cec4b4d46ea0cf"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getBooleanSlot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#75-79) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#76-78)\n",
            "markdown": "[StorageSlot.getBooleanSlot(bytes32)](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L75-L79) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L76-L78)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 79
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4ffcc4bc56133512f291e0c8f23819ab8446934f704bebe05592aa8eea731e00"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeMemoryAccess(string[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#492-496) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#493-495)\n",
            "markdown": "[Arrays.unsafeMemoryAccess(string[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L492-L496) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L493-L495)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 492,
                  "endLine": 496
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "50ba910c6a57cf8f2235ff74545620007d319431f5c943121c8ce002b061fa62"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "AccessControlUpgradeable._getAccessControlStorage() (node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#68-72) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#69-71)\n",
            "markdown": "[AccessControlUpgradeable._getAccessControlStorage()](node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#L68-L72) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#L69-L71)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 72
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5680d471535f3bf400b3592cd64650de4517b1f7c20cb6b3a2d3f398bcccd302"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getBytes32Slot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#84-88) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#85-87)\n",
            "markdown": "[StorageSlot.getBytes32Slot(bytes32)](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L84-L88) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L85-L87)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 88
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "612a9dc8c9c1dbfe7add1f8af0f4900582be8dddb47a4de76e5fa917021b0b88"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#204-275) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#227-234)\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#240-249)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L204-L275) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L227-L234)\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L240-L249)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 275
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "65f44c3b86accfa132c68b07bb21be2f91c79e87197596cdb86d7ef037deed90"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeSetLength(bytes32[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#514-518) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#515-517)\n",
            "markdown": "[Arrays.unsafeSetLength(bytes32[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L514-L518) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L515-L517)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 514,
                  "endLine": 518
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "66ce461297ef6ab0d610cd68af29f6079f0c304dc66f67d1f13e7b6a2353bced"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeMemoryAccess(bytes[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#481-485) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#482-484)\n",
            "markdown": "[Arrays.unsafeMemoryAccess(bytes[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L481-L485) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L482-L484)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 481,
                  "endLine": 485
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "670354cc568562532afd42180e9c35b6a0f9c2a23faf9e696c8c888e1a0871fd"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "EnumerableSet.values(EnumerableSet.AddressSet) (node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#377-386) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#381-383)\n",
            "markdown": "[EnumerableSet.values(EnumerableSet.AddressSet)](node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#L377-L386) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#L381-L383)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol"
                },
                "region": {
                  "startLine": 377,
                  "endLine": 386
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "68b4bf6c672b0afb99d039a9a64fdc9f5f7831d124d16648063893b48ae26063"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Panic.panic(uint256) (node_modules/@openzeppelin/contracts/utils/Panic.sol#50-56) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Panic.sol#51-55)\n",
            "markdown": "[Panic.panic(uint256)](node_modules/@openzeppelin/contracts/utils/Panic.sol#L50-L56) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Panic.sol#L51-L55)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Panic.sol"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 56
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6b9e67291c502e0170fe7e856173b7dfdc60a14ed74cc695b43324c0047fff70"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SlotDerivation.deriveMapping(bytes32,address) (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#74-80) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#75-79)\n",
            "markdown": "[SlotDerivation.deriveMapping(bytes32,address)](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L74-L80) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L75-L79)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 80
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6dc6e7a6f5845e65aa7908d2272874c501c48c63332fd5bfc194bce712a295be"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeAccess(bytes[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#422-428) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#424-426)\n",
            "markdown": "[Arrays.unsafeAccess(bytes[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L422-L428) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L424-L426)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 422,
                  "endLine": 428
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "71534ce16db9be6c988323595979d6438131a6ce4a69feaa0503206e91074d27"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeAccess(bytes32[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#396-402) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#398-400)\n",
            "markdown": "[Arrays.unsafeAccess(bytes32[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L396-L402) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L398-L400)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 396,
                  "endLine": 402
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7614c864a716a6d04514ce5de39b68f8e78ea26a2c5de8ef59a47e703db292b5"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getInt256Slot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#102-106) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#103-105)\n",
            "markdown": "[StorageSlot.getInt256Slot(bytes32)](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L102-L106) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L103-L105)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "76502d1be4f6d19cafe0691c0f0f12ee6bd060f0d2e31208ded3c04716e69dd3"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeMemoryAccess(bytes32[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#459-463) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#460-462)\n",
            "markdown": "[Arrays.unsafeMemoryAccess(bytes32[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L459-L463) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L460-L462)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 459,
                  "endLine": 463
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "806037ea436187eb916c26d073ccdaac631622a1de8d25364a5094a350f617d6"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Address._revert(bytes) (node_modules/@openzeppelin/contracts/utils/Address.sol#138-148) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#142-144)\n",
            "markdown": "[Address._revert(bytes)](node_modules/@openzeppelin/contracts/utils/Address.sol#L138-L148) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Address.sol#L142-L144)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 138,
                  "endLine": 148
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8595d00e73efb47c217c3e53b5a9a9d95de4df79d2407b253f5240492ed20621"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "EnumerableSet.values(EnumerableSet.AddressSet,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#396-405) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#400-402)\n",
            "markdown": "[EnumerableSet.values(EnumerableSet.AddressSet,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#L396-L405) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#L400-L402)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol"
                },
                "region": {
                  "startLine": 396,
                  "endLine": 405
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8cfd724507338e6f543e3672f5c1ce39816fb3ae3e94960050090423d29cd841"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getBytesSlot(bytes) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#138-142) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#139-141)\n",
            "markdown": "[StorageSlot.getBytesSlot(bytes)](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L138-L142) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L139-L141)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol"
                },
                "region": {
                  "startLine": 138,
                  "endLine": 142
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8fc877a96d4067319b343c0d9bd2cdbf0f95fd84f867bf804c0023402d21d0a3"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SlotDerivation.deriveArray(bytes32) (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#64-69) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#65-68)\n",
            "markdown": "[SlotDerivation.deriveArray(bytes32)](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L64-L69) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L65-L68)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9171ad9399845f8dc5cf057bd9778ea3766c115d08f6b1a56c9c87998d56be02"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays._castToUint256Array(address[]) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#180-184) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#181-183)\n",
            "markdown": "[Arrays._castToUint256Array(address[])](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L180-L184) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L181-L183)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 180,
                  "endLine": 184
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9753502b457038467f3e8efc34d439bafbd183f4937df47ea3f6ab2e4e5f76cc"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Math.mul512(uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#37-46) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#41-45)\n",
            "markdown": "[Math.mul512(uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L37-L46) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L41-L45)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "98a38daf187a050903d837022e875b739edc787fbc4a7747baf53e811ba118d5"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeSetLength(address[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#503-507) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#504-506)\n",
            "markdown": "[Arrays.unsafeSetLength(address[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L503-L507) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L504-L506)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 503,
                  "endLine": 507
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9a7ee79bac0e518b792d064e4d681a892f35f513f3ef01a0e2e52710b6be4d48"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getStringSlot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#111-115) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#112-114)\n",
            "markdown": "[StorageSlot.getStringSlot(bytes32)](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L111-L115) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L112-L114)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol"
                },
                "region": {
                  "startLine": 111,
                  "endLine": 115
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9afc2c43f065cf3fe1452981a6b55dc27c6bc95642e598da45fa226493eac6cb"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "EnumerableSet.values(EnumerableSet.UintSet) (node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#479-488) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#483-485)\n",
            "markdown": "[EnumerableSet.values(EnumerableSet.UintSet)](node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#L479-L488) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#L483-L485)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol"
                },
                "region": {
                  "startLine": 479,
                  "endLine": 488
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9fe05754dc9ed1b7303897cc8e6ea5953420424546c5a67a255e5b6d5a4430e1"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeSetLength(string[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#547-551) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#548-550)\n",
            "markdown": "[Arrays.unsafeSetLength(string[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L547-L551) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L548-L550)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 547,
                  "endLine": 551
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "aba394584ae6e4b92b0bbda3daa2b440703bd4b106f7e1402f5b41b16f4898d4"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays._swap(uint256,uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#170-177) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#171-176)\n",
            "markdown": "[Arrays._swap(uint256,uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L170-L177) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L171-L176)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 170,
                  "endLine": 177
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b61edd35b44510b90f6464c2b78e550012540b8df4632db85792e4bceed785e6"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SlotDerivation.deriveMapping(bytes32,string) (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#129-139) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#130-138)\n",
            "markdown": "[SlotDerivation.deriveMapping(bytes32,string)](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L129-L139) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L130-L138)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol"
                },
                "region": {
                  "startLine": 129,
                  "endLine": 139
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b94b12995e1c69b74910033b8f8c4727c3f1b58578480c43843a761cb2ba4d21"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays._mload(uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#161-165) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#162-164)\n",
            "markdown": "[Arrays._mload(uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L161-L165) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L162-L164)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 161,
                  "endLine": 165
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bca962b5da286d5ccd550fc9c25576c1c4413bec5924b44777fe82e9011856ce"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Math.log2(uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#612-651) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#648-650)\n",
            "markdown": "[Math.log2(uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L612-L651) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L648-L650)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 612,
                  "endLine": 651
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bcf77543398db6517f671d5853fc727bac283727a7180b3084f18a05ad072d90"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeSetLength(uint256[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#525-529) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#526-528)\n",
            "markdown": "[Arrays.unsafeSetLength(uint256[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L525-L529) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L526-L528)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 525,
                  "endLine": 529
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bd0f4864634e0acd6ddad0affbf7dfd3b3e44ca17c4c8eb4f951bf130dc6b8ae"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SlotDerivation.deriveMapping(bytes32,bytes32) (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#96-102) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#97-101)\n",
            "markdown": "[SlotDerivation.deriveMapping(bytes32,bytes32)](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L96-L102) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L97-L101)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 102
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "beef93b7a62dc9fb31f18b0b17aa689678d48b7e54eaf489571a7cb00fd39ac8"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getStringSlot(string) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#120-124) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#121-123)\n",
            "markdown": "[StorageSlot.getStringSlot(string)](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L120-L124) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L121-L123)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol"
                },
                "region": {
                  "startLine": 120,
                  "endLine": 124
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c242b16f9d7ba2c0f8be576b5fc71ae1951eea16908028f4cd35e032f919a8e5"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays._begin(uint256[]) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#142-146) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#143-145)\n",
            "markdown": "[Arrays._begin(uint256[])](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L142-L146) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L143-L145)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 142,
                  "endLine": 146
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c3da5508380e35399d98e8fc26e9f4c54da3e62bd36717fa8923a0735953c6a5"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "ReentrancyGuardUpgradeable._getReentrancyGuardStorage() (node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#49-53) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#50-52)\n",
            "markdown": "[ReentrancyGuardUpgradeable._getReentrancyGuardStorage()](node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#L49-L53) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#L50-L52)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 53
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c74944202c684bc4510102e6e8eca46750dac1fccc93a01bed0e6468356dbdce"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Math.tryMul(uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#73-84) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#76-80)\n",
            "markdown": "[Math.tryMul(uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L73-L84) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L76-L80)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 84
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c9b577be3ced93f22739fffdb6412c478ac11ba4fbfb832a24f271848789988b"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays._castToUint256Comp(function(address,address) returns(bool)) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#194-200) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#197-199)\n",
            "markdown": "[Arrays._castToUint256Comp(function(address,address) returns(bool))](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L194-L200) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L197-L199)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 194,
                  "endLine": 200
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ccf5c6ed74f1c74e62bfcfd131c7d8cb43fed6c7311ecc6df4793dab2821f915"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Math.tryMod(uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#102-110) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#105-108)\n",
            "markdown": "[Math.tryMod(uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L102-L110) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L105-L108)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 110
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d157c527fb903d6284db1c35ee7cf183db1be54b3e53913f3390c37f30279328"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Math.tryModExp(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#409-433) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#411-432)\n",
            "markdown": "[Math.tryModExp(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L409-L433) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L411-L432)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 409,
                  "endLine": 433
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d4318b56c437eeba9d6e9e029d17fbb0f2a9df441b46ce99a9a041213a6b7091"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Math.tryDiv(uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#89-97) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#92-95)\n",
            "markdown": "[Math.tryDiv(uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L89-L97) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L92-L95)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 97
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d4fee22f13e59a3fe9db6750252db29a47d4fdb32128fb1942827c0910e4a97e"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getBytesSlot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#129-133) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#130-132)\n",
            "markdown": "[StorageSlot.getBytesSlot(bytes32)](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L129-L133) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L130-L132)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol"
                },
                "region": {
                  "startLine": 129,
                  "endLine": 133
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d78e7e85e12d6bdb74bebffb61bcb33e173d4336ea4af18ae3bd87951c3eef33"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeMemoryAccess(address[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#448-452) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#449-451)\n",
            "markdown": "[Arrays.unsafeMemoryAccess(address[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L448-L452) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L449-L451)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 448,
                  "endLine": 452
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d84a6adbece158298ff323c62592820670f922614365aab1030a46fe819af7b4"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SlotDerivation.deriveMapping(bytes32,uint256) (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#107-113) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#108-112)\n",
            "markdown": "[SlotDerivation.deriveMapping(bytes32,uint256)](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L107-L113) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L108-L112)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 113
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e0c01184cd0f973029b5ffb3c7d6c3654d89bb577dec5adeea6d8a72a7419783"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SafeERC20._callOptionalReturn(IERC20,bytes) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#173-191) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#176-186)\n",
            "markdown": "[SafeERC20._callOptionalReturn(IERC20,bytes)](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L173-L191) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L176-L186)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"
                },
                "region": {
                  "startLine": 173,
                  "endLine": 191
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e33f785d9aba7249e9ee500ebca265dd99dc07b707a45bc02b2097d7f4cae1df"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeMemoryAccess(uint256[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#470-474) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#471-473)\n",
            "markdown": "[Arrays.unsafeMemoryAccess(uint256[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L470-L474) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L471-L473)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 470,
                  "endLine": 474
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e9571a20df2361fbd18bc01ecfc0fa26f2de255110fd64f57c99564bd559d84c"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeSetLength(bytes[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#536-540) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#537-539)\n",
            "markdown": "[Arrays.unsafeSetLength(bytes[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L536-L540) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L537-L539)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 536,
                  "endLine": 540
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e9a4a56b0b60c07c6c41982899c7fbdb235cb9f930acb7564b7487245dca4eeb"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SlotDerivation.deriveMapping(bytes32,int256) (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#118-124) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#119-123)\n",
            "markdown": "[SlotDerivation.deriveMapping(bytes32,int256)](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L118-L124) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L119-L123)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol"
                },
                "region": {
                  "startLine": 118,
                  "endLine": 124
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "eef1873b7c0c8bf657b5d83e205a6a8a3ae41447af3ea4cab0c54f0cd620111e"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays._castToUint256Comp(function(bytes32,bytes32) returns(bool)) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#203-209) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#206-208)\n",
            "markdown": "[Arrays._castToUint256Comp(function(bytes32,bytes32) returns(bool))](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L203-L209) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L206-L208)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 203,
                  "endLine": 209
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f025e70799e79ea2829b8c65b6f8347ad6485edf56519fa840628dc1e1d8573c"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Math.add512(uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#25-30) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#26-29)\n",
            "markdown": "[Math.add512(uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L25-L30) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L26-L29)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 30
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f2906f6dc51a3ca6ec6db0c163e036667be25739e938918f805dd4954be968d7"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays._castToUint256Array(bytes32[]) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#187-191) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#188-190)\n",
            "markdown": "[Arrays._castToUint256Array(bytes32[])](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L187-L191) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L188-L190)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 187,
                  "endLine": 191
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f4f738b0cde59ef8b1cab287f9b8d1ac1337448bf28d9f9978670ed0cbc3ebc9"
          }
        },
        {
          "ruleId": "3-0-pragma",
          "message": {
            "text": "11 different versions of Solidity are used:\n\t- Version constraint ^0.8.0 is used by:\n\t\t-^0.8.0 (node_modules/@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol#2)\n\t\t-^0.8.0 (node_modules/@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol#2)\n\t- Version constraint ^0.8.20 is used by:\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/Address.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/Arrays.sol#5)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/Comparators.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/Errors.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/Panic.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#5)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#5)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#5)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#5)\n\t- Version constraint ^0.8.22 is used by:\n\t\t-^0.8.22 (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#4)\n\t- Version constraint >=0.8.4 is used by:\n\t\t->=0.8.4 (node_modules/@openzeppelin/contracts/access/IAccessControl.sol#4)\n\t\t->=0.8.4 (node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol#3)\n\t- Version constraint >=0.6.2 is used by:\n\t\t->=0.6.2 (node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol#4)\n\t\t->=0.6.2 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)\n\t- Version constraint >=0.4.16 is used by:\n\t\t->=0.4.16 (node_modules/@openzeppelin/contracts/interfaces/IERC165.sol#4)\n\t\t->=0.4.16 (node_modules/@openzeppelin/contracts/interfaces/IERC20.sol#4)\n\t\t->=0.4.16 (node_modules/@openzeppelin/contracts/interfaces/draft-IERC1822.sol#4)\n\t\t->=0.4.16 (node_modules/@openzeppelin/contracts/proxy/beacon/IBeacon.sol#4)\n\t\t->=0.4.16 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)\n\t\t->=0.4.16 (node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#4)\n\t- Version constraint >=0.4.11 is used by:\n\t\t->=0.4.11 (node_modules/@openzeppelin/contracts/interfaces/IERC1967.sol#4)\n\t- Version constraint ^0.8.21 is used by:\n\t\t-^0.8.21 (node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol#4)\n\t- Version constraint >=0.5.0 is used by:\n\t\t->=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol#2)\n\t\t->=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#2)\n\t\t->=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#2)\n\t\t->=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol#2)\n\t\t->=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol#2)\n\t\t->=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol#2)\n\t\t->=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#2)\n\t\t->=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#2)\n\t- Version constraint >=0.7.5 is used by:\n\t\t->=0.7.5 (node_modules/@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol#2)\n\t- Version constraint ^0.8.24 is used by:\n\t\t-^0.8.24 (contracts/Hub.sol#2)\n\t\t-^0.8.24 (contracts/MockERC20.sol#2)\n\t\t-^0.8.24 (contracts/Offer.sol#2)\n\t\t-^0.8.24 (contracts/PriceOracle.sol#2)\n\t\t-^0.8.24 (contracts/Profile.sol#2)\n\t\t-^0.8.24 (contracts/Trade.sol#2)\n\t\t-^0.8.24 (contracts/interfaces/IHub.sol#2)\n\t\t-^0.8.24 (contracts/interfaces/ILocalToken.sol#2)\n\t\t-^0.8.24 (contracts/interfaces/IOffer.sol#2)\n\t\t-^0.8.24 (contracts/interfaces/IPriceOracle.sol#2)\n\t\t-^0.8.24 (contracts/interfaces/IProfile.sol#2)\n\t\t-^0.8.24 (contracts/interfaces/ITrade.sol#2)\n\t\t-^0.8.24 (contracts/libraries/FeeCalculations.sol#2)\n\t\t-^0.8.24 (contracts/libraries/TradeUtils.sol#2)\n",
            "markdown": "11 different versions of Solidity are used:\n\t- Version constraint ^0.8.0 is used by:\n\t\t-[^0.8.0](node_modules/@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol#L2)\n\t\t-[^0.8.0](node_modules/@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol#L2)\n\t- Version constraint ^0.8.20 is used by:\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/Address.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L5)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/Comparators.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/Context.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/Errors.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/Panic.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L5)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L5)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#L5)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#L5)\n\t- Version constraint ^0.8.22 is used by:\n\t\t-[^0.8.22](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#L4)\n\t- Version constraint >=0.8.4 is used by:\n\t\t-[>=0.8.4](node_modules/@openzeppelin/contracts/access/IAccessControl.sol#L4)\n\t\t-[>=0.8.4](node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol#L3)\n\t- Version constraint >=0.6.2 is used by:\n\t\t-[>=0.6.2](node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol#L4)\n\t\t-[>=0.6.2](node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#L4)\n\t- Version constraint >=0.4.16 is used by:\n\t\t-[>=0.4.16](node_modules/@openzeppelin/contracts/interfaces/IERC165.sol#L4)\n\t\t-[>=0.4.16](node_modules/@openzeppelin/contracts/interfaces/IERC20.sol#L4)\n\t\t-[>=0.4.16](node_modules/@openzeppelin/contracts/interfaces/draft-IERC1822.sol#L4)\n\t\t-[>=0.4.16](node_modules/@openzeppelin/contracts/proxy/beacon/IBeacon.sol#L4)\n\t\t-[>=0.4.16](node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#L4)\n\t\t-[>=0.4.16](node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#L4)\n\t- Version constraint >=0.4.11 is used by:\n\t\t-[>=0.4.11](node_modules/@openzeppelin/contracts/interfaces/IERC1967.sol#L4)\n\t- Version constraint ^0.8.21 is used by:\n\t\t-[^0.8.21](node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol#L4)\n\t- Version constraint >=0.5.0 is used by:\n\t\t-[>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol#L2)\n\t\t-[>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#L2)\n\t\t-[>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#L2)\n\t\t-[>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol#L2)\n\t\t-[>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol#L2)\n\t\t-[>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol#L2)\n\t\t-[>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#L2)\n\t\t-[>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#L2)\n\t- Version constraint >=0.7.5 is used by:\n\t\t-[>=0.7.5](node_modules/@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol#L2)\n\t- Version constraint ^0.8.24 is used by:\n\t\t-[^0.8.24](contracts/Hub.sol#L2)\n\t\t-[^0.8.24](contracts/MockERC20.sol#L2)\n\t\t-[^0.8.24](contracts/Offer.sol#L2)\n\t\t-[^0.8.24](contracts/PriceOracle.sol#L2)\n\t\t-[^0.8.24](contracts/Profile.sol#L2)\n\t\t-[^0.8.24](contracts/Trade.sol#L2)\n\t\t-[^0.8.24](contracts/interfaces/IHub.sol#L2)\n\t\t-[^0.8.24](contracts/interfaces/ILocalToken.sol#L2)\n\t\t-[^0.8.24](contracts/interfaces/IOffer.sol#L2)\n\t\t-[^0.8.24](contracts/interfaces/IPriceOracle.sol#L2)\n\t\t-[^0.8.24](contracts/interfaces/IProfile.sol#L2)\n\t\t-[^0.8.24](contracts/interfaces/ITrade.sol#L2)\n\t\t-[^0.8.24](contracts/libraries/FeeCalculations.sol#L2)\n\t\t-[^0.8.24](contracts/libraries/TradeUtils.sol#L2)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "49e925a559983ef8412299edecc0da6b78fb1fefd7ee99cb21f7ada4496973f3"
          }
        },
        {
          "ruleId": "3-0-cyclomatic-complexity",
          "message": {
            "text": "Offer._updateOfferInternal(uint256,IOffer.OfferState,uint256,uint256,uint256) (contracts/Offer.sol#180-239) has a high cyclomatic complexity (12).\n",
            "markdown": "[Offer._updateOfferInternal(uint256,IOffer.OfferState,uint256,uint256,uint256)](contracts/Offer.sol#L180-L239) has a high cyclomatic complexity (12).\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 180,
                  "endLine": 239
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c974223aa7cc261bfffc73a68bc3917b48e12e1ffa58b4eb0838179064b2e86e"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Version constraint >=0.5.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- DirtyBytesArrayToStorage\n\t- ABIDecodeTwoDimensionalArrayMemory\n\t- KeccakCaching\n\t- EmptyByteArrayCopy\n\t- DynamicArrayCleanup\n\t- ImplicitConstructorCallvalueCheck\n\t- TupleAssignmentMultiStackSlotComponents\n\t- MemoryArrayCreationOverflow\n\t- privateCanBeOverridden\n\t- SignedArrayStorageCopy\n\t- ABIEncoderV2StorageArrayWithMultiSlotElement\n\t- DynamicConstructorArgumentsClippedABIV2\n\t- UninitializedFunctionPointerInConstructor\n\t- IncorrectEventSignatureInLibraries\n\t- ABIEncoderV2PackedStorage.\nIt is used by:\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#2)\n",
            "markdown": "Version constraint >=0.5.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- DirtyBytesArrayToStorage\n\t- ABIDecodeTwoDimensionalArrayMemory\n\t- KeccakCaching\n\t- EmptyByteArrayCopy\n\t- DynamicArrayCleanup\n\t- ImplicitConstructorCallvalueCheck\n\t- TupleAssignmentMultiStackSlotComponents\n\t- MemoryArrayCreationOverflow\n\t- privateCanBeOverridden\n\t- SignedArrayStorageCopy\n\t- ABIEncoderV2StorageArrayWithMultiSlotElement\n\t- DynamicConstructorArgumentsClippedABIV2\n\t- UninitializedFunctionPointerInConstructor\n\t- IncorrectEventSignatureInLibraries\n\t- ABIEncoderV2PackedStorage.\nIt is used by:\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#L2)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "20ac37ec9d4d0cc5f035e3fbc13e1bda8435fec7e5f1d2a01beea1112de88453"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Version constraint ^0.8.22 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- VerbatimInvalidDeduplication.\nIt is used by:\n\t- ^0.8.22 (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#4)\n",
            "markdown": "Version constraint ^0.8.22 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- VerbatimInvalidDeduplication.\nIt is used by:\n\t- [^0.8.22](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#L4)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "51be16f25ed128d5aad09621d0242137843e6fdc44c4261865d8633a06252ca1"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Version constraint >=0.4.11 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- DirtyBytesArrayToStorage\n\t- KeccakCaching\n\t- EmptyByteArrayCopy\n\t- DynamicArrayCleanup\n\t- ImplicitConstructorCallvalueCheck\n\t- TupleAssignmentMultiStackSlotComponents\n\t- MemoryArrayCreationOverflow\n\t- privateCanBeOverridden\n\t- SignedArrayStorageCopy\n\t- UninitializedFunctionPointerInConstructor_0.4.x\n\t- IncorrectEventSignatureInLibraries_0.4.x\n\t- ExpExponentCleanup\n\t- NestedArrayFunctionCallDecoder\n\t- ZeroFunctionSelector\n\t- DelegateCallReturnValue\n\t- ECRecoverMalformedInput\n\t- SkipEmptyStringLiteral.\nIt is used by:\n\t- >=0.4.11 (node_modules/@openzeppelin/contracts/interfaces/IERC1967.sol#4)\n",
            "markdown": "Version constraint >=0.4.11 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- DirtyBytesArrayToStorage\n\t- KeccakCaching\n\t- EmptyByteArrayCopy\n\t- DynamicArrayCleanup\n\t- ImplicitConstructorCallvalueCheck\n\t- TupleAssignmentMultiStackSlotComponents\n\t- MemoryArrayCreationOverflow\n\t- privateCanBeOverridden\n\t- SignedArrayStorageCopy\n\t- UninitializedFunctionPointerInConstructor_0.4.x\n\t- IncorrectEventSignatureInLibraries_0.4.x\n\t- ExpExponentCleanup\n\t- NestedArrayFunctionCallDecoder\n\t- ZeroFunctionSelector\n\t- DelegateCallReturnValue\n\t- ECRecoverMalformedInput\n\t- SkipEmptyStringLiteral.\nIt is used by:\n\t- [>=0.4.11](node_modules/@openzeppelin/contracts/interfaces/IERC1967.sol#L4)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/interfaces/IERC1967.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "74f591bd56227505ae69d53dd632a09a4e221f22125975c982acb7b17e17bade"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Version constraint >=0.7.5 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- FullInlinerNonExpressionSplitArgumentEvaluationOrder\n\t- MissingSideEffectsOnSelectorAccess\n\t- AbiReencodingHeadOverflowWithStaticArrayCleanup\n\t- DirtyBytesArrayToStorage\n\t- DataLocationChangeInInternalOverride\n\t- NestedCalldataArrayAbiReencodingSizeValidation\n\t- SignedImmutables\n\t- ABIDecodeTwoDimensionalArrayMemory\n\t- KeccakCaching.\nIt is used by:\n\t- >=0.7.5 (node_modules/@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol#2)\n",
            "markdown": "Version constraint >=0.7.5 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- FullInlinerNonExpressionSplitArgumentEvaluationOrder\n\t- MissingSideEffectsOnSelectorAccess\n\t- AbiReencodingHeadOverflowWithStaticArrayCleanup\n\t- DirtyBytesArrayToStorage\n\t- DataLocationChangeInInternalOverride\n\t- NestedCalldataArrayAbiReencodingSizeValidation\n\t- SignedImmutables\n\t- ABIDecodeTwoDimensionalArrayMemory\n\t- KeccakCaching.\nIt is used by:\n\t- [>=0.7.5](node_modules/@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol#L2)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "75fef1b899eb3831e4f2b98b9104966c8cdafecb506f0294f5bdb3439fa9bce4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Version constraint >=0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- MissingSideEffectsOnSelectorAccess\n\t- AbiReencodingHeadOverflowWithStaticArrayCleanup\n\t- DirtyBytesArrayToStorage\n\t- NestedCalldataArrayAbiReencodingSizeValidation\n\t- ABIDecodeTwoDimensionalArrayMemory\n\t- KeccakCaching\n\t- EmptyByteArrayCopy\n\t- DynamicArrayCleanup\n\t- MissingEscapingInFormatting\n\t- ArraySliceDynamicallyEncodedBaseType\n\t- ImplicitConstructorCallvalueCheck\n\t- TupleAssignmentMultiStackSlotComponents\n\t- MemoryArrayCreationOverflow.\nIt is used by:\n\t- >=0.6.2 (node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol#4)\n\t- >=0.6.2 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)\n",
            "markdown": "Version constraint >=0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- MissingSideEffectsOnSelectorAccess\n\t- AbiReencodingHeadOverflowWithStaticArrayCleanup\n\t- DirtyBytesArrayToStorage\n\t- NestedCalldataArrayAbiReencodingSizeValidation\n\t- ABIDecodeTwoDimensionalArrayMemory\n\t- KeccakCaching\n\t- EmptyByteArrayCopy\n\t- DynamicArrayCleanup\n\t- MissingEscapingInFormatting\n\t- ArraySliceDynamicallyEncodedBaseType\n\t- ImplicitConstructorCallvalueCheck\n\t- TupleAssignmentMultiStackSlotComponents\n\t- MemoryArrayCreationOverflow.\nIt is used by:\n\t- [>=0.6.2](node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol#L4)\n\t- [>=0.6.2](node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#L4)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7f03185aacd037ebbf1681286eac42fc34acc45279b764b2a0e4ec1ad9daebef"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Version constraint >=0.4.16 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- DirtyBytesArrayToStorage\n\t- ABIDecodeTwoDimensionalArrayMemory\n\t- KeccakCaching\n\t- EmptyByteArrayCopy\n\t- DynamicArrayCleanup\n\t- ImplicitConstructorCallvalueCheck\n\t- TupleAssignmentMultiStackSlotComponents\n\t- MemoryArrayCreationOverflow\n\t- privateCanBeOverridden\n\t- SignedArrayStorageCopy\n\t- ABIEncoderV2StorageArrayWithMultiSlotElement\n\t- DynamicConstructorArgumentsClippedABIV2\n\t- UninitializedFunctionPointerInConstructor_0.4.x\n\t- IncorrectEventSignatureInLibraries_0.4.x\n\t- ExpExponentCleanup\n\t- NestedArrayFunctionCallDecoder\n\t- ZeroFunctionSelector.\nIt is used by:\n\t- >=0.4.16 (node_modules/@openzeppelin/contracts/interfaces/IERC165.sol#4)\n\t- >=0.4.16 (node_modules/@openzeppelin/contracts/interfaces/IERC20.sol#4)\n\t- >=0.4.16 (node_modules/@openzeppelin/contracts/interfaces/draft-IERC1822.sol#4)\n\t- >=0.4.16 (node_modules/@openzeppelin/contracts/proxy/beacon/IBeacon.sol#4)\n\t- >=0.4.16 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)\n\t- >=0.4.16 (node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#4)\n",
            "markdown": "Version constraint >=0.4.16 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- DirtyBytesArrayToStorage\n\t- ABIDecodeTwoDimensionalArrayMemory\n\t- KeccakCaching\n\t- EmptyByteArrayCopy\n\t- DynamicArrayCleanup\n\t- ImplicitConstructorCallvalueCheck\n\t- TupleAssignmentMultiStackSlotComponents\n\t- MemoryArrayCreationOverflow\n\t- privateCanBeOverridden\n\t- SignedArrayStorageCopy\n\t- ABIEncoderV2StorageArrayWithMultiSlotElement\n\t- DynamicConstructorArgumentsClippedABIV2\n\t- UninitializedFunctionPointerInConstructor_0.4.x\n\t- IncorrectEventSignatureInLibraries_0.4.x\n\t- ExpExponentCleanup\n\t- NestedArrayFunctionCallDecoder\n\t- ZeroFunctionSelector.\nIt is used by:\n\t- [>=0.4.16](node_modules/@openzeppelin/contracts/interfaces/IERC165.sol#L4)\n\t- [>=0.4.16](node_modules/@openzeppelin/contracts/interfaces/IERC20.sol#L4)\n\t- [>=0.4.16](node_modules/@openzeppelin/contracts/interfaces/draft-IERC1822.sol#L4)\n\t- [>=0.4.16](node_modules/@openzeppelin/contracts/proxy/beacon/IBeacon.sol#L4)\n\t- [>=0.4.16](node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#L4)\n\t- [>=0.4.16](node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#L4)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/interfaces/IERC165.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "997b000817728ca37890d096b0897ba476392ade49fb97c3eb28c5fed1d0d1a6"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Version constraint ^0.8.20 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- VerbatimInvalidDeduplication\n\t- FullInlinerNonExpressionSplitArgumentEvaluationOrder\n\t- MissingSideEffectsOnSelectorAccess.\nIt is used by:\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Address.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Arrays.sol#5)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Comparators.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Errors.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Panic.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#5)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#5)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#5)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#5)\n",
            "markdown": "Version constraint ^0.8.20 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- VerbatimInvalidDeduplication\n\t- FullInlinerNonExpressionSplitArgumentEvaluationOrder\n\t- MissingSideEffectsOnSelectorAccess.\nIt is used by:\n\t- [^0.8.20](node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/Address.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L5)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/Comparators.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/Context.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/Errors.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/Panic.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L5)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L5)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#L5)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#L5)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a8401e75b0cb2975089eff89e3eaeb19982ace58a0f0b7ddef9661dfe4f5ab2a"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Version constraint ^0.8.21 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- VerbatimInvalidDeduplication.\nIt is used by:\n\t- ^0.8.21 (node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol#4)\n",
            "markdown": "Version constraint ^0.8.21 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- VerbatimInvalidDeduplication.\nIt is used by:\n\t- [^0.8.21](node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol#L4)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a8608c14ae0750f00a7807352dc6f0df639c2e44b5d205e7c9fe7c245e930ff8"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- FullInlinerNonExpressionSplitArgumentEvaluationOrder\n\t- MissingSideEffectsOnSelectorAccess\n\t- AbiReencodingHeadOverflowWithStaticArrayCleanup\n\t- DirtyBytesArrayToStorage\n\t- DataLocationChangeInInternalOverride\n\t- NestedCalldataArrayAbiReencodingSizeValidation\n\t- SignedImmutables\n\t- ABIDecodeTwoDimensionalArrayMemory\n\t- KeccakCaching.\nIt is used by:\n\t- ^0.8.0 (node_modules/@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol#2)\n\t- ^0.8.0 (node_modules/@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol#2)\n",
            "markdown": "Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- FullInlinerNonExpressionSplitArgumentEvaluationOrder\n\t- MissingSideEffectsOnSelectorAccess\n\t- AbiReencodingHeadOverflowWithStaticArrayCleanup\n\t- DirtyBytesArrayToStorage\n\t- DataLocationChangeInInternalOverride\n\t- NestedCalldataArrayAbiReencodingSizeValidation\n\t- SignedImmutables\n\t- ABIDecodeTwoDimensionalArrayMemory\n\t- KeccakCaching.\nIt is used by:\n\t- [^0.8.0](node_modules/@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol#L2)\n\t- [^0.8.0](node_modules/@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol#L2)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "adf619c6277ca7d7e102f9a2780d86f637bdc56c2b746f1d79c5b2e877415ca4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Version constraint >=0.8.4 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- FullInlinerNonExpressionSplitArgumentEvaluationOrder\n\t- MissingSideEffectsOnSelectorAccess\n\t- AbiReencodingHeadOverflowWithStaticArrayCleanup\n\t- DirtyBytesArrayToStorage\n\t- DataLocationChangeInInternalOverride\n\t- NestedCalldataArrayAbiReencodingSizeValidation\n\t- SignedImmutables.\nIt is used by:\n\t- >=0.8.4 (node_modules/@openzeppelin/contracts/access/IAccessControl.sol#4)\n\t- >=0.8.4 (node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol#3)\n",
            "markdown": "Version constraint >=0.8.4 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- FullInlinerNonExpressionSplitArgumentEvaluationOrder\n\t- MissingSideEffectsOnSelectorAccess\n\t- AbiReencodingHeadOverflowWithStaticArrayCleanup\n\t- DirtyBytesArrayToStorage\n\t- DataLocationChangeInInternalOverride\n\t- NestedCalldataArrayAbiReencodingSizeValidation\n\t- SignedImmutables.\nIt is used by:\n\t- [>=0.8.4](node_modules/@openzeppelin/contracts/access/IAccessControl.sol#L4)\n\t- [>=0.8.4](node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol#L3)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/access/IAccessControl.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b04f785005687357fb439bc74756a3dbf6bb82e6b89b609ea7a29ac458b80352"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Trade._transfer(address,address,uint256) (contracts/Trade.sol#912-921):\n\t- (success,None) = _to.call{value: _amount}() (contracts/Trade.sol#915)\n",
            "markdown": "Low level call in [Trade._transfer(address,address,uint256)](contracts/Trade.sol#L912-L921):\n\t- [(success,None) = _to.call{value: _amount}()](contracts/Trade.sol#L915)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 912,
                  "endLine": 921
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0742d4530d8fba015a95c65b4f6894eb2645cc9ac48966508f279f46bde41f0a"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.functionStaticCall(address,bytes) (node_modules/@openzeppelin/contracts/utils/Address.sol#87-90):\n\t- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#88)\n",
            "markdown": "Low level call in [Address.functionStaticCall(address,bytes)](node_modules/@openzeppelin/contracts/utils/Address.sol#L87-L90):\n\t- [(success,returndata) = target.staticcall(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L88)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 90
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "247d32f8415b82d5c23ed6a41efcfcaf895e7c922154258f9f9a615461fbe29a"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.functionDelegateCall(address,bytes) (node_modules/@openzeppelin/contracts/utils/Address.sol#96-99):\n\t- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#97)\n",
            "markdown": "Low level call in [Address.functionDelegateCall(address,bytes)](node_modules/@openzeppelin/contracts/utils/Address.sol#L96-L99):\n\t- [(success,returndata) = target.delegatecall(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L97)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 99
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "433da96c86e01861fa69e008bc0fa0f29707486963ae85d1642a3caa97fa6485"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.functionCallWithValue(address,bytes,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#75-81):\n\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#79)\n",
            "markdown": "Low level call in [Address.functionCallWithValue(address,bytes,uint256)](node_modules/@openzeppelin/contracts/utils/Address.sol#L75-L81):\n\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L79)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 81
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9d21a0d332acca394c80ac4b5f3704fa12498d04758e35edc563916aa5962904"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#33-42):\n\t- (success,returndata) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#38)\n",
            "markdown": "Low level call in [Address.sendValue(address,uint256)](node_modules/@openzeppelin/contracts/utils/Address.sol#L33-L42):\n\t- [(success,returndata) = recipient.call{value: amount}()](node_modules/@openzeppelin/contracts/utils/Address.sol#L38)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 42
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9f7e597b41909f45a10f7c9d4c603a28e1b78bd17d0fda8426b817fdc2576796"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.rawFulfillRandomWords(uint256,uint256[])._requestId (contracts/Trade.sol#714) is not in mixedCase\n",
            "markdown": "Parameter [Trade.rawFulfillRandomWords(uint256,uint256[])._requestId](contracts/Trade.sol#L714) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 714,
                  "endLine": 714
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0aff3a5713b7bf17961440df216f5bf91457ce7298c1e9810f9af821437671d9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.fundEscrow(uint256)._tradeId (contracts/Trade.sol#325) is not in mixedCase\n",
            "markdown": "Parameter [Trade.fundEscrow(uint256)._tradeId](contracts/Trade.sol#L325) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 325,
                  "endLine": 325
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0bd5771c47e6af3874f9b1191cba90a100a427e02c8ebc47fa57ff86714fb35e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.setEmergencyPause(bool)._paused (contracts/PriceOracle.sol#333) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.setEmergencyPause(bool)._paused](contracts/PriceOracle.sol#L333) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 333,
                  "endLine": 333
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0c06ed52d4657f5176eb08d9a19890a4427733b32d47685866ce9334a3a8a5ad"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Hub.unpauseOperation(bytes32)._operation (contracts/Hub.sol#201) is not in mixedCase\n",
            "markdown": "Parameter [Hub.unpauseOperation(bytes32)._operation](contracts/Hub.sol#L201) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Hub.sol"
                },
                "region": {
                  "startLine": 201,
                  "endLine": 201
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0c32e530b5ae7d21863589239956a1992f0165c7ea6d39a2e269e7300dff7241"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant AccessControlUpgradeable.AccessControlStorageLocation (node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#66) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [AccessControlUpgradeable.AccessControlStorageLocation](node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#L66) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0c5e75082cb1ae4de268786ea31269d9fb4bcf024dfd1f9d96c81678bd55bc7d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.getOffersByType(IOffer.OfferType,string,address,uint256,uint256)._token (contracts/Offer.sol#297) is not in mixedCase\n",
            "markdown": "Parameter [Offer.getOffersByType(IOffer.OfferType,string,address,uint256,uint256)._token](contracts/Offer.sol#L297) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 297,
                  "endLine": 297
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0dad21e63a5933d1cea7d75a56944e06e094027077aa56149d2f4d95f8d52319"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.getOffersByType(IOffer.OfferType,string,address,uint256,uint256)._type (contracts/Offer.sol#295) is not in mixedCase\n",
            "markdown": "Parameter [Offer.getOffersByType(IOffer.OfferType,string,address,uint256,uint256)._type](contracts/Offer.sol#L295) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 295,
                  "endLine": 295
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "102d76b3f6fc3a3e946b69708f18ddc0de2c4bfb513b3acb9ebf200928ad3442"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.getUserOffers(address)._user (contracts/Offer.sol#375) is not in mixedCase\n",
            "markdown": "Parameter [Offer.getUserOffers(address)._user](contracts/Offer.sol#L375) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 375,
                  "endLine": 375
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "114c9e569adbd7d001fc5ae09f7a9e3b204b3749beca64ae8763aa3a8d5b11fa"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.removeArbitratorFromCurrency(address,string)._currency (contracts/Trade.sol#769) is not in mixedCase\n",
            "markdown": "Parameter [Trade.removeArbitratorFromCurrency(address,string)._currency](contracts/Trade.sol#L769) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 769,
                  "endLine": 769
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "144d0ef2c2b08aeda4d13cd981a257b3bd19bf7a0da9472aa88baf168a8cd851"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.updateVRFSubscription(uint64)._subscriptionId (contracts/Trade.sol#703) is not in mixedCase\n",
            "markdown": "Parameter [Trade.updateVRFSubscription(uint64)._subscriptionId](contracts/Trade.sol#L703) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 703,
                  "endLine": 703
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "148ba1ddd364ebdbcc90321e08a70d930e923a3cc32a411ddc7d8da0d065c4a9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.getUserActiveOfferCount(address)._user (contracts/Offer.sol#71) is not in mixedCase\n",
            "markdown": "Parameter [Offer.getUserActiveOfferCount(address)._user](contracts/Offer.sol#L71) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "161bb3547e7ee62d03b1b3087455c85775d991d5140c647ca3ce9528bc27512f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.getOffersByType(IOffer.OfferType,string,address,uint256,uint256)._fiatCurrency (contracts/Offer.sol#296) is not in mixedCase\n",
            "markdown": "Parameter [Offer.getOffersByType(IOffer.OfferType,string,address,uint256,uint256)._fiatCurrency](contracts/Offer.sol#L296) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 296,
                  "endLine": 296
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1660f7d8da395188fc277502839b9c212ba9563ed93c8187950ee6f4ab7da585"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.releaseEscrow(uint256)._tradeId (contracts/Trade.sol#390) is not in mixedCase\n",
            "markdown": "Parameter [Trade.releaseEscrow(uint256)._tradeId](contracts/Trade.sol#L390) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 390,
                  "endLine": 390
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "17800bea6c1c2c74ea5de0199285913177a52205f657996cdca2ef38e977ec5e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.initialize(address,address)._swapRouter (contracts/PriceOracle.sol#120) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.initialize(address,address)._swapRouter](contracts/PriceOracle.sol#L120) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 120,
                  "endLine": 120
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "17add989035679d5102997a7dc92ae42f9df9e718c9501e296779952d57d6ce5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade._performSwapAndBurn(address,uint256,address,address)._localToken (contracts/Trade.sol#1003) is not in mixedCase\n",
            "markdown": "Parameter [Trade._performSwapAndBurn(address,uint256,address,address)._localToken](contracts/Trade.sol#L1003) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 1003,
                  "endLine": 1003
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "17c524c013314215438c803b0e4ff0eb00411298b30e11c2e74a64e41719621b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.updateChainlinkFeed(string,address,uint8,uint256)._feedAddress (contracts/PriceOracle.sol#207) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.updateChainlinkFeed(string,address,uint8,uint256)._feedAddress](contracts/PriceOracle.sol#L207) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 207,
                  "endLine": 207
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1ae914ca11228dccec3304e99edf62f7bd73b536afc53379a3a31b629abbf899"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.createOffer(IOffer.OfferType,string,address,uint256,uint256,uint256,string)._token (contracts/Offer.sol#98) is not in mixedCase\n",
            "markdown": "Parameter [Offer.createOffer(IOffer.OfferType,string,address,uint256,uint256,uint256,string)._token](contracts/Offer.sol#L98) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 98,
                  "endLine": 98
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1c7ff65cd6b72381848b92c2d0658ff24f72ce8e965dc84534f518bc370417ec"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.getArbitratorsForCurrency(string)._currency (contracts/Trade.sol#830) is not in mixedCase\n",
            "markdown": "Parameter [Trade.getArbitratorsForCurrency(string)._currency](contracts/Trade.sol#L830) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 830,
                  "endLine": 830
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "210d8589f3302649fab2daea6a49f5e2dba4e33fe76b18d60bd6719ccdd00fb2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.updatePrices(string[],uint256[])._prices (contracts/PriceOracle.sol#507) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.updatePrices(string[],uint256[])._prices](contracts/PriceOracle.sol#L507) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 507,
                  "endLine": 507
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "21fb307637d311bd91091e08c417be2ee080911450498b625dd7225b8ed3c17c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function AccessControlUpgradeable.__AccessControl_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#86-87) is not in mixedCase\n",
            "markdown": "Function [AccessControlUpgradeable.__AccessControl_init_unchained()](node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#L86-L87) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 87
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "226e7d5af64c132f41abf0df79c0723e2a9ee53e2961f745732ce61ab1360dbe"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.createOffer(IOffer.OfferType,string,address,uint256,uint256,uint256,string)._rate (contracts/Offer.sol#101) is not in mixedCase\n",
            "markdown": "Parameter [Offer.createOffer(IOffer.OfferType,string,address,uint256,uint256,uint256,string)._rate](contracts/Offer.sol#L101) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 101,
                  "endLine": 101
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "270f606d6f59c17e0f78bd6db217c0023580b521ec0eb6135b42dee4a7f64bc3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.disputeTrade(uint256,string)._tradeId (contracts/Trade.sol#513) is not in mixedCase\n",
            "markdown": "Parameter [Trade.disputeTrade(uint256,string)._tradeId](contracts/Trade.sol#L513) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 513,
                  "endLine": 513
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "286c2359ccaa54950ddffec6784a33643de8a9302ff3fefa02cdffeec21acab5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Profile.updateActiveTrades(address,int256)._delta (contracts/Profile.sol#194) is not in mixedCase\n",
            "markdown": "Parameter [Profile.updateActiveTrades(address,int256)._delta](contracts/Profile.sol#L194) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 194,
                  "endLine": 194
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "288a1682c2b3de668862eb09d071bcc53c89eb4c9bbeb0fc5159c035d57b056a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.pauseOffer(uint256)._offerId (contracts/Offer.sol#245) is not in mixedCase\n",
            "markdown": "Parameter [Offer.pauseOffer(uint256)._offerId](contracts/Offer.sol#L245) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 245,
                  "endLine": 245
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "289a8f2a8e9fa19e4719a3aed652c8e957bed5baef3a5e48e0178caea7e71810"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade._performSwapAndBurn(address,uint256,address,address)._fromToken (contracts/Trade.sol#1001) is not in mixedCase\n",
            "markdown": "Parameter [Trade._performSwapAndBurn(address,uint256,address,address)._fromToken](contracts/Trade.sol#L1001) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 1001,
                  "endLine": 1001
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2b9e0c1677283fffbd1625a7f7c6a229d8e34aadf58cbc43c1b647f14bd945ff"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Hub.isContractPaused(address)._contract (contracts/Hub.sol#339) is not in mixedCase\n",
            "markdown": "Parameter [Hub.isContractPaused(address)._contract](contracts/Hub.sol#L339) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Hub.sol"
                },
                "region": {
                  "startLine": 339,
                  "endLine": 339
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3220240272603acd5a5539cee6056f938fa5ada6dddd288aa30f9c639c44edc7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.updateChainlinkFeed(string,address,uint8,uint256)._decimals (contracts/PriceOracle.sol#208) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.updateChainlinkFeed(string,address,uint8,uint256)._decimals](contracts/PriceOracle.sol#L208) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 208,
                  "endLine": 208
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3b278943047f9fd4d4385443e3328b1bc9c5ec5f36ef38b2689815e119007453"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ReentrancyGuardUpgradeable.__ReentrancyGuard_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#64-67) is not in mixedCase\n",
            "markdown": "Function [ReentrancyGuardUpgradeable.__ReentrancyGuard_init_unchained()](node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#L64-L67) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 67
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3e75801ad9978e638414efcd60e7f0073b008a621502b3366b5fb8e7ac736ea4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.updateTokenRoute(address,IPriceOracle.TokenRoute)._token (contracts/PriceOracle.sol#514) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.updateTokenRoute(address,IPriceOracle.TokenRoute)._token](contracts/PriceOracle.sol#L514) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 514,
                  "endLine": 514
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3e95a039d055950487c8338a61cd539f76324fbb659624de0b3ef32ef3872254"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Profile.updateActiveTrades(address,int256)._user (contracts/Profile.sol#193) is not in mixedCase\n",
            "markdown": "Parameter [Profile.updateActiveTrades(address,int256)._user](contracts/Profile.sol#L193) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 193,
                  "endLine": 193
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "41a0a89f83dcb3faf0f1ced2b83ed9779b44dee5b87fe5ae1efc2ce36e924b61"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.updateOfferState(uint256,IOffer.OfferState)._offerId (contracts/Offer.sol#384) is not in mixedCase\n",
            "markdown": "Parameter [Offer.updateOfferState(uint256,IOffer.OfferState)._offerId](contracts/Offer.sol#L384) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 384,
                  "endLine": 384
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "41ba6de075d666f46575f3547312e2395c7d3ec0c055b2cbe3a3498e929859c5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable Hub.__gap (contracts/Hub.sol#55) is not in mixedCase\n",
            "markdown": "Variable [Hub.__gap](contracts/Hub.sol#L55) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Hub.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "44b821848395eb96066765087b824698c63f801ef505fe2e0d183a3fba935097"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Hub.enhancedEmergencyPause(string,uint256)._extendedTimeout (contracts/Hub.sol#229) is not in mixedCase\n",
            "markdown": "Parameter [Hub.enhancedEmergencyPause(string,uint256)._extendedTimeout](contracts/Hub.sol#L229) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Hub.sol"
                },
                "region": {
                  "startLine": 229,
                  "endLine": 229
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "478c443dbfe36534522de542d4564628d866973b59532f19eb0deb27ca45733d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.updateOffer(uint256,IOffer.OfferState,uint256,uint256,uint256)._offerId (contracts/Offer.sol#163) is not in mixedCase\n",
            "markdown": "Parameter [Offer.updateOffer(uint256,IOffer.OfferState,uint256,uint256,uint256)._offerId](contracts/Offer.sol#L163) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 163,
                  "endLine": 163
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "490b45cc17cf72521627612871f2cf1c7ea855fed1e4f32c701119f80faf7c88"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.updatePrices(string[],uint256[])._currencies (contracts/PriceOracle.sol#507) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.updatePrices(string[],uint256[])._currencies](contracts/PriceOracle.sol#L507) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 507,
                  "endLine": 507
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4b9f675fd5d065b1924676923e55b90870c27de75f3d232381b3a558de947bd5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Profile.canCreateOffer(address)._user (contracts/Profile.sol#286) is not in mixedCase\n",
            "markdown": "Parameter [Profile.canCreateOffer(address)._user](contracts/Profile.sol#L286) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 286,
                  "endLine": 286
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4d25c5029f0db137778f39fe0a2e702b2ab843e0a202d44d7d70b3a5a8bf6d05"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable PriceOracle.__gap (contracts/PriceOracle.sol#70) is not in mixedCase\n",
            "markdown": "Variable [PriceOracle.__gap](contracts/PriceOracle.sol#L70) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "543e584a38a45bb7c52d9999b7f2a2b6d526dd4eafb4d19dab94dcd991a8affe"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Profile.canCreateTrade(address)._user (contracts/Profile.sol#298) is not in mixedCase\n",
            "markdown": "Parameter [Profile.canCreateTrade(address)._user](contracts/Profile.sol#L298) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 298,
                  "endLine": 298
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "54a81ea213a9f30e8a0cd6140fe732b3da4b2b82a7fb30b370fd45064d80d837"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.configureVRF(address,uint64,bytes32,uint32,uint16)._callbackGasLimit (contracts/Trade.sol#681) is not in mixedCase\n",
            "markdown": "Parameter [Trade.configureVRF(address,uint64,bytes32,uint32,uint16)._callbackGasLimit](contracts/Trade.sol#L681) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 681,
                  "endLine": 681
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "55111da9207fced235b430d889248ad4b095094c9039ba6087c3267f2af939c4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Profile.getTradingStats(address)._user (contracts/Profile.sol#250) is not in mixedCase\n",
            "markdown": "Parameter [Profile.getTradingStats(address)._user](contracts/Profile.sol#L250) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 250,
                  "endLine": 250
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5965c50f4c081b9dea69a706526d87f7bdbd47c468648e4a3b2a3953ca19835d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.updateOffer(uint256,IOffer.OfferState,uint256,uint256,uint256)._newState (contracts/Offer.sol#164) is not in mixedCase\n",
            "markdown": "Parameter [Offer.updateOffer(uint256,IOffer.OfferState,uint256,uint256,uint256)._newState](contracts/Offer.sol#L164) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 164,
                  "endLine": 164
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5c2248bbf86932a774a9e9486493a66a9558a954706ec90ed75f2959f205b2b1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.createOffer(IOffer.OfferType,string,address,uint256,uint256,uint256,string)._minAmount (contracts/Offer.sol#99) is not in mixedCase\n",
            "markdown": "Parameter [Offer.createOffer(IOffer.OfferType,string,address,uint256,uint256,uint256,string)._minAmount](contracts/Offer.sol#L99) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 99,
                  "endLine": 99
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5d2ed6e3f28c7e4ba2ed75b314fd92503c86fc733d443f33c427d0c9237743ac"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.getTokenPriceInUSD(address)._token (contracts/PriceOracle.sol#228) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.getTokenPriceInUSD(address)._token](contracts/PriceOracle.sol#L228) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 228,
                  "endLine": 228
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5d34564a5c2c647b5e91897341dadbfb2186c5cf23c89fdc1e1febdc1e17354c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Hub.pauseContract(address,bool)._contract (contracts/Hub.sol#215) is not in mixedCase\n",
            "markdown": "Parameter [Hub.pauseContract(address,bool)._contract](contracts/Hub.sol#L215) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Hub.sol"
                },
                "region": {
                  "startLine": 215,
                  "endLine": 215
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5d672566dbfb34d4d305072e6474cc911dd26308f2ac832ffe4e4456c8d14322"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.registerPriceRoute(address,address[],uint24[],address,uint32)._path (contracts/PriceOracle.sol#175) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.registerPriceRoute(address,address[],uint24[],address,uint32)._path](contracts/PriceOracle.sol#L175) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 175,
                  "endLine": 175
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5e21282e9a9313544d856b0786552421478eefb6c88e0ad2ec484e5caac25867"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.createTrade(uint256,uint256,string)._buyerContact (contracts/Trade.sol#213) is not in mixedCase\n",
            "markdown": "Parameter [Trade.createTrade(uint256,uint256,string)._buyerContact](contracts/Trade.sol#L213) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 213,
                  "endLine": 213
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5e300a1577ea52b718420da2820e7d7d9fe6644f1834f0af38d23591180c5cab"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.cancelTrade(uint256)._tradeId (contracts/Trade.sol#432) is not in mixedCase\n",
            "markdown": "Parameter [Trade.cancelTrade(uint256)._tradeId](contracts/Trade.sol#L432) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 432,
                  "endLine": 432
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "625ea7d924f91f4dd5118d6c20b0b3bb3bf31a933160f81f1d188ec4aa49bd66"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Hub.enhancedEmergencyPause(string,uint256)._reason (contracts/Hub.sol#229) is not in mixedCase\n",
            "markdown": "Parameter [Hub.enhancedEmergencyPause(string,uint256)._reason](contracts/Hub.sol#L229) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Hub.sol"
                },
                "region": {
                  "startLine": 229,
                  "endLine": 229
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "65148c0eddf6b2fad4fddc9c0064d2c29e700e4caf70de84e9f2322d6a8d51cd"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Hub.updateAdmin(address)._newAdmin (contracts/Hub.sol#130) is not in mixedCase\n",
            "markdown": "Parameter [Hub.updateAdmin(address)._newAdmin](contracts/Hub.sol#L130) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Hub.sol"
                },
                "region": {
                  "startLine": 130,
                  "endLine": 130
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "656c6abd338d9d531ab9a97d96cc40d6a2faf8522590c104837e252e1222df27"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.resolveDispute(uint256,address)._tradeId (contracts/Trade.sol#605) is not in mixedCase\n",
            "markdown": "Parameter [Trade.resolveDispute(uint256,address)._tradeId](contracts/Trade.sol#L605) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 605,
                  "endLine": 605
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "65db0eecd56919819dc64949fd04b20b16709b39ddbf200229426ef7c5d79583"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Profile.updateContact(string,string)._publicKey (contracts/Profile.sol#96) is not in mixedCase\n",
            "markdown": "Parameter [Profile.updateContact(string,string)._publicKey](contracts/Profile.sol#L96) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 96
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6634c8d3767e681a6c8daab986cd6f9f8bce0d83f1205ebd9e13747ee7039a5f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.acceptTrade(uint256,string)._sellerContact (contracts/Trade.sol#290) is not in mixedCase\n",
            "markdown": "Parameter [Trade.acceptTrade(uint256,string)._sellerContact](contracts/Trade.sol#L290) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 290,
                  "endLine": 290
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "688390b31106216f79ed3321820f8abf56b92d9cbd24faee945474e0b1bb6939"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.getDisputeInfo(uint256)._tradeId (contracts/Trade.sol#843) is not in mixedCase\n",
            "markdown": "Parameter [Trade.getDisputeInfo(uint256)._tradeId](contracts/Trade.sol#L843) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 843,
                  "endLine": 843
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6905c2160c9473ae5d65ecac5ff8ffd145fcabd599b9afa022671880d113c452"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Profile.updateActiveOffers(address,int256)._user (contracts/Profile.sol#155) is not in mixedCase\n",
            "markdown": "Parameter [Profile.updateActiveOffers(address,int256)._user](contracts/Profile.sol#L155) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 155,
                  "endLine": 155
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "69357e08d56db3157e89011455a5638aa7d92960203af75bd38c94be651ae649"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.resolveDispute(uint256,address)._winner (contracts/Trade.sol#605) is not in mixedCase\n",
            "markdown": "Parameter [Trade.resolveDispute(uint256,address)._winner](contracts/Trade.sol#L605) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 605,
                  "endLine": 605
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6a3f4252489f7974a6836385e4cea228bd1b9a0f287b3ff226512f5cef1c8d0b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.getUserOffers(address,uint256,uint256)._user (contracts/Offer.sol#333) is not in mixedCase\n",
            "markdown": "Parameter [Offer.getUserOffers(address,uint256,uint256)._user](contracts/Offer.sol#L333) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 333,
                  "endLine": 333
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6b2be4fd666ea55a05e07228ffadc21ead1fe162b979a6ecdf9e4c6756daa3c7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade._performSwapAndBurn(address,uint256,address,address)._amount (contracts/Trade.sol#1002) is not in mixedCase\n",
            "markdown": "Parameter [Trade._performSwapAndBurn(address,uint256,address,address)._amount](contracts/Trade.sol#L1002) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 1002,
                  "endLine": 1002
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6bd8c0767ebb3442749338220956b411783195abb7588dbee75be525e35c948f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.updateOffer(uint256,IOffer.OfferState,uint256,uint256,uint256)._newRate (contracts/Offer.sol#165) is not in mixedCase\n",
            "markdown": "Parameter [Offer.updateOffer(uint256,IOffer.OfferState,uint256,uint256,uint256)._newRate](contracts/Offer.sol#L165) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6c985eb2a923178f5d0fdfcfad7c996129c9b68d21a3b146d8544f59c12555ba"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.calculateFees(uint256)._amount (contracts/Trade.sol#868) is not in mixedCase\n",
            "markdown": "Parameter [Trade.calculateFees(uint256)._amount](contracts/Trade.sol#L868) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 868,
                  "endLine": 868
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6dc78082a6a97ed36d4fd78872a54be2abfd7e749e1c26195e8add0791f3da07"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.markFiatDeposited(uint256)._tradeId (contracts/Trade.sol#366) is not in mixedCase\n",
            "markdown": "Parameter [Trade.markFiatDeposited(uint256)._tradeId](contracts/Trade.sol#L366) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 366,
                  "endLine": 366
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "74be30035da7e9669fe8130d7607a0812f8318e492c4993346d3f33e4ee780e4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.createTrade(uint256,uint256,string)._offerId (contracts/Trade.sol#211) is not in mixedCase\n",
            "markdown": "Parameter [Trade.createTrade(uint256,uint256,string)._offerId](contracts/Trade.sol#L211) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 211,
                  "endLine": 211
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "784f12627c8c5b9f79a78cbc1e34edbaab4327fd223df8cef8aa9527043a3935"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Profile.updateTradeCount(address,bool)._user (contracts/Profile.sol#127) is not in mixedCase\n",
            "markdown": "Parameter [Profile.updateTradeCount(address,bool)._user](contracts/Profile.sol#L127) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 127
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "786323a52c45a33ec8c9a23547a1fa5fbb507867b8bb98d05e07ea68c68f2093"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Profile.updateTradeCount(address,bool)._completed (contracts/Profile.sol#128) is not in mixedCase\n",
            "markdown": "Parameter [Profile.updateTradeCount(address,bool)._completed](contracts/Profile.sol#L128) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 128
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "79b89cd6f4d7ce9eccbdeba861cfc17a8b89b4650459025df048b0b3c3b0c92b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.isPriceValid(string)._currency (contracts/PriceOracle.sol#534) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.isPriceValid(string)._currency](contracts/PriceOracle.sol#L534) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 534,
                  "endLine": 534
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7a6ee63034382a46ce6274ebebbfcbdb616c66e1d8a5210eb7e6bc9eaa38b858"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle._getChainlinkPrice(address)._feedAddress (contracts/PriceOracle.sol#390) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle._getChainlinkPrice(address)._feedAddress](contracts/PriceOracle.sol#L390) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 390,
                  "endLine": 390
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7acd49dd5db87cfdaaba3a1be2fb35aa08e66f8ff30d92b5cfdfd43b2fb336c6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade._performSwapAndBurn(address,uint256,address,address)._swapRouter (contracts/Trade.sol#1004) is not in mixedCase\n",
            "markdown": "Parameter [Trade._performSwapAndBurn(address,uint256,address,address)._swapRouter](contracts/Trade.sol#L1004) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 1004,
                  "endLine": 1004
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7e926916bd729c11e4fdbeeb09fb16a94a6280258b19fec941b2b85f31fb0e9d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.updateFiatPrices(string[],uint256[])._currencies (contracts/PriceOracle.sol#144) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.updateFiatPrices(string[],uint256[])._currencies](contracts/PriceOracle.sol#L144) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 144,
                  "endLine": 144
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7f15051a96e07f0c143656137b6a307b5a8ebee7ce2c2637d35c2cff595e9a45"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.updateSwapRouter(address)._newRouter (contracts/PriceOracle.sol#342) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.updateSwapRouter(address)._newRouter](contracts/PriceOracle.sol#L342) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 342,
                  "endLine": 342
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "82c8e0e3097a6616f55c7b5679ac28b96f89e4bbea85f971df603633267fb016"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ReentrancyGuardUpgradeable.__ReentrancyGuard_init() (node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#60-62) is not in mixedCase\n",
            "markdown": "Function [ReentrancyGuardUpgradeable.__ReentrancyGuard_init()](node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#L60-L62) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 62
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8358359e33b12b973b39646749b14bc461ec4795e26f2669ed0c3b687a34fd7c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.createTrade(uint256,uint256,string)._amount (contracts/Trade.sol#212) is not in mixedCase\n",
            "markdown": "Parameter [Trade.createTrade(uint256,uint256,string)._amount](contracts/Trade.sol#L212) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 212,
                  "endLine": 212
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "838fa163b9b4c32516103eb1b4e3c62665bf5649137342b2a888deeb37b2e032"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.updateOffer(uint256,IOffer.OfferState,uint256,uint256,uint256)._newMax (contracts/Offer.sol#167) is not in mixedCase\n",
            "markdown": "Parameter [Offer.updateOffer(uint256,IOffer.OfferState,uint256,uint256,uint256)._newMax](contracts/Offer.sol#L167) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 167,
                  "endLine": 167
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "84273510a50ab1e3cfdd7d5719316e208b17077c2378b1e211cebad4a004992e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.acceptTrade(uint256,string)._tradeId (contracts/Trade.sol#289) is not in mixedCase\n",
            "markdown": "Parameter [Trade.acceptTrade(uint256,string)._tradeId](contracts/Trade.sol#L289) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 289,
                  "endLine": 289
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8483ca305bf8a6d75e169b50c276f99d051b4dc5784ecd2264ca73dfbe3f22f3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.archiveOffer(uint256)._offerId (contracts/Offer.sol#261) is not in mixedCase\n",
            "markdown": "Parameter [Offer.archiveOffer(uint256)._offerId](contracts/Offer.sol#L261) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 261,
                  "endLine": 261
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "84bad6a5335a939acda36dbb46e526d4926cc93a5a0dc383501fe03f96fdae7b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ERC165Upgradeable.__ERC165_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#25-26) is not in mixedCase\n",
            "markdown": "Function [ERC165Upgradeable.__ERC165_init_unchained()](node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#L25-L26) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 26
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "85d4e6d503145e70d4f27b51c03c2aecc7efa120329a4cf27b34d33cd9a2c942"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ContextUpgradeable.__Context_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#21-22) is not in mixedCase\n",
            "markdown": "Function [ContextUpgradeable.__Context_init_unchained()](node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#L21-L22) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 22
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8629c89abc9e568d22212182eb038287fc4f676ff34add41294173d644b25bcb"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Profile.getProfile(address)._user (contracts/Profile.sol#229) is not in mixedCase\n",
            "markdown": "Parameter [Profile.getProfile(address)._user](contracts/Profile.sol#L229) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 229,
                  "endLine": 229
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8917af5a251f5eab4345ceadae4e94fc69a2df5c478c9f500b52005653cb83f4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.getPriceAge(string)._currency (contracts/PriceOracle.sol#543) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.getPriceAge(string)._currency](contracts/PriceOracle.sol#L543) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 543,
                  "endLine": 543
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8cb147169ac3871e7eedfa3a5f33cc9bfba1b4ef9984a2bb2c9454a132e65967"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.updateTokenRoute(address,IPriceOracle.TokenRoute)._route (contracts/PriceOracle.sol#514) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.updateTokenRoute(address,IPriceOracle.TokenRoute)._route](contracts/PriceOracle.sol#L514) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 514,
                  "endLine": 514
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8d364259be3025966d3438ecaeba8e16e4d3baffd3216a00e8c3887aa064c5ea"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.updateOffer(uint256,IOffer.OfferState,uint256,uint256,uint256)._newMin (contracts/Offer.sol#166) is not in mixedCase\n",
            "markdown": "Parameter [Offer.updateOffer(uint256,IOffer.OfferState,uint256,uint256,uint256)._newMin](contracts/Offer.sol#L166) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 166,
                  "endLine": 166
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8d564871a604d9806d0f90696de6a72e3d04f59c034078a437beaefa4c74a8ba"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Profile.profileExists(address)._user (contracts/Profile.sol#238) is not in mixedCase\n",
            "markdown": "Parameter [Profile.profileExists(address)._user](contracts/Profile.sol#L238) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 238,
                  "endLine": 238
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8dca0801081d0362930e8ad78eaa03cd1b6fed31f1da2c521bb4693fc872ae66"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.getCachedTokenPrice(address)._token (contracts/PriceOracle.sol#243) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.getCachedTokenPrice(address)._token](contracts/PriceOracle.sol#L243) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 243,
                  "endLine": 243
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8f87c9b495753c7ce1dd7aea63ec7f64f96be5eeae29cfeffb4b70c6b65418f5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function UUPSUpgradeable.__UUPSUpgradeable_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#68-69) is not in mixedCase\n",
            "markdown": "Function [UUPSUpgradeable.__UUPSUpgradeable_init_unchained()](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#L68-L69) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8ff7b5e08e6880768da974c4a296eba4ffa484881ed81786ba37c7da4749321d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.getTokenPriceAge(address)._token (contracts/PriceOracle.sol#321) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.getTokenPriceAge(address)._token](contracts/PriceOracle.sol#L321) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 321,
                  "endLine": 321
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9041642b25e9464e4a2b3daf7ec833ae08630847241886ea53fe88e5ea2bb1f3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Hub.batchCheckOperationsPaused(bytes32[])._operations (contracts/Hub.sol#357) is not in mixedCase\n",
            "markdown": "Parameter [Hub.batchCheckOperationsPaused(bytes32[])._operations](contracts/Hub.sol#L357) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Hub.sol"
                },
                "region": {
                  "startLine": 357,
                  "endLine": 357
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "92cb25c4833f7a956aaaac352228732b1e0e71e4acecb60be3b74a86399194f1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.getOffer(uint256)._offerId (contracts/Offer.sol#364) is not in mixedCase\n",
            "markdown": "Parameter [Offer.getOffer(uint256)._offerId](contracts/Offer.sol#L364) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 364,
                  "endLine": 364
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9488895d5be717c0cb9ef2aa597f7d8ae9082e0d2e549b58cd4352cc7275bc8b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.registerArbitrator(string[],string)._supportedCurrencies (contracts/Trade.sol#729) is not in mixedCase\n",
            "markdown": "Parameter [Trade.registerArbitrator(string[],string)._supportedCurrencies](contracts/Trade.sol#L729) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 729,
                  "endLine": 729
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "94fb033af464ac7d0cdcad13b7bd57e88ea8caff08555fd45da898f597e5b417"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.updateChainlinkFeed(string,address,uint8,uint256)._heartbeat (contracts/PriceOracle.sol#209) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.updateChainlinkFeed(string,address,uint8,uint256)._heartbeat](contracts/PriceOracle.sol#L209) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 209,
                  "endLine": 209
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "95ccc5a9904c4cfa8f1b30630f61406eae9ff3d24f4c8c73b2265ffb10a926b8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.disputeTrade(uint256,string)._reason (contracts/Trade.sol#513) is not in mixedCase\n",
            "markdown": "Parameter [Trade.disputeTrade(uint256,string)._reason](contracts/Trade.sol#L513) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 513,
                  "endLine": 513
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "96915727ce9ab6898617157f02556a45bbc82c703a6a2ff33a2fd01a1a22a0f2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Hub.pauseContract(address,bool)._paused (contracts/Hub.sol#215) is not in mixedCase\n",
            "markdown": "Parameter [Hub.pauseContract(address,bool)._paused](contracts/Hub.sol#L215) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Hub.sol"
                },
                "region": {
                  "startLine": 215,
                  "endLine": 215
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9b872bc35efb1f2c0addb0f687f52d32aef7c45033c912655c015305d9cd4c22"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Profile.updateContact(string,string)._contact (contracts/Profile.sol#95) is not in mixedCase\n",
            "markdown": "Parameter [Profile.updateContact(string,string)._contact](contracts/Profile.sol#L95) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 95,
                  "endLine": 95
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9ce112010d78e466678dc8344df7728c9a50d9af4f16517a14f18df6bcec731e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.updateFiatPrices(string[],uint256[])._prices (contracts/PriceOracle.sol#145) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.updateFiatPrices(string[],uint256[])._prices](contracts/PriceOracle.sol#L145) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 145,
                  "endLine": 145
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9efac5af0244aa776eff1a521d24f2740ddb600b87453185c5f51a9c5de85ddd"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.initialize(address,address,address)._offerContract (contracts/Trade.sol#187) is not in mixedCase\n",
            "markdown": "Parameter [Trade.initialize(address,address,address)._offerContract](contracts/Trade.sol#L187) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 187,
                  "endLine": 187
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a1cb45ecc06c7b853cd362300133ca1eda059bcac8d0cd0a82d9e9f2818d8f01"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function AccessControlUpgradeable.__AccessControl_init() (node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#83-84) is not in mixedCase\n",
            "markdown": "Function [AccessControlUpgradeable.__AccessControl_init()](node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#L83-L84) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 84
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a333fa38b5f96027543bfa2131aac6765059644ab6c7dae2f8d357b5fbaa2f2b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.configureVRF(address,uint64,bytes32,uint32,uint16)._keyHash (contracts/Trade.sol#680) is not in mixedCase\n",
            "markdown": "Parameter [Trade.configureVRF(address,uint64,bytes32,uint32,uint16)._keyHash](contracts/Trade.sol#L680) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 680,
                  "endLine": 680
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a5f8e6b3ce4304b7c238e725cfbeab9a64ac7dc32f3ca88672e844d012cfd8a8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.createOffer(IOffer.OfferType,string,address,uint256,uint256,uint256,string)._fiatCurrency (contracts/Offer.sol#97) is not in mixedCase\n",
            "markdown": "Parameter [Offer.createOffer(IOffer.OfferType,string,address,uint256,uint256,uint256,string)._fiatCurrency](contracts/Offer.sol#L97) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 97,
                  "endLine": 97
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ae69aef5b09788af3c1499d6568893c8d70e34922f0e319558bab06d592c527b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.rawFulfillRandomWords(uint256,uint256[])._randomWords (contracts/Trade.sol#714) is not in mixedCase\n",
            "markdown": "Parameter [Trade.rawFulfillRandomWords(uint256,uint256[])._randomWords](contracts/Trade.sol#L714) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 714,
                  "endLine": 714
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b0855a3f9ae7f246ffba5e822df94af38a396abd857abdfc2f0f99d2c46f3780"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.getTokenPriceInFiat(address,string,uint256)._token (contracts/PriceOracle.sol#265) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.getTokenPriceInFiat(address,string,uint256)._token](contracts/PriceOracle.sol#L265) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 265,
                  "endLine": 265
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b32f5ac65928721d707e2a19b6b3307a11b4b2eeb58ef8c2ccb6ecdcc6c5001c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.registerPriceRoute(address,address[],uint24[],address,uint32)._chainlinkFeed (contracts/PriceOracle.sol#177) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.registerPriceRoute(address,address[],uint24[],address,uint32)._chainlinkFeed](contracts/PriceOracle.sol#L177) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 177,
                  "endLine": 177
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b363fe9823fc8d917d571026ad4847cce04c19b820c1a154fdf7cec93bdd4e52"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function PriceOracle._getChainlinkPrice(address) (contracts/PriceOracle.sol#390-410) is not in mixedCase\n",
            "markdown": "Function [PriceOracle._getChainlinkPrice(address)](contracts/PriceOracle.sol#L390-L410) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 390,
                  "endLine": 410
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b3679c564e3bc484b805bb7a1edc25819b3ed06dd102ad691547809e368e1bfe"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.getUserOffers(address,uint256,uint256)._limit (contracts/Offer.sol#335) is not in mixedCase\n",
            "markdown": "Parameter [Offer.getUserOffers(address,uint256,uint256)._limit](contracts/Offer.sol#L335) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 335,
                  "endLine": 335
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b4a3cb5fa7489d74c883a8f958163e9ea2b681ea1c11aab4e19115040960e229"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.initialize(address,address)._admin (contracts/PriceOracle.sol#119) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.initialize(address,address)._admin](contracts/PriceOracle.sol#L119) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 119,
                  "endLine": 119
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b5fe0353de945c4e34f2c3cdbd61854995891279b14ee7189cb9a86e2895a3f2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.removeArbitratorFromCurrency(address,string)._arbitrator (contracts/Trade.sol#768) is not in mixedCase\n",
            "markdown": "Parameter [Trade.removeArbitratorFromCurrency(address,string)._arbitrator](contracts/Trade.sol#L768) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 768,
                  "endLine": 768
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b66371deee2b81e795998bef1416e5656bdc84cc924026a8635e3284a0e731b8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.getTokenPriceInFiat(address,string,uint256)._amount (contracts/PriceOracle.sol#267) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.getTokenPriceInFiat(address,string,uint256)._amount](contracts/PriceOracle.sol#L267) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 267,
                  "endLine": 267
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bce6f11579bc62274fdd4ac331dbb3ad01f9e7d3cec944ec021d31098b311677"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.configureVRF(address,uint64,bytes32,uint32,uint16)._subscriptionId (contracts/Trade.sol#679) is not in mixedCase\n",
            "markdown": "Parameter [Trade.configureVRF(address,uint64,bytes32,uint32,uint16)._subscriptionId](contracts/Trade.sol#L679) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 679,
                  "endLine": 679
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bd5a59bf2f8e1ddae71b5ebff27336d1add327d00b50b59a234a512d46aea4f2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.initialize(address,address,address)._profileContract (contracts/Trade.sol#188) is not in mixedCase\n",
            "markdown": "Parameter [Trade.initialize(address,address,address)._profileContract](contracts/Trade.sol#L188) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 188,
                  "endLine": 188
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bd903a46e4db6126d71673a5fe6006a5e99098be8612aae677dac1d2904ab35c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.getTokenPriceInFiat(address,string,uint256)._fiatCurrency (contracts/PriceOracle.sol#266) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.getTokenPriceInFiat(address,string,uint256)._fiatCurrency](contracts/PriceOracle.sol#L266) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 266,
                  "endLine": 266
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bdc35bb033c755d0e21a0e2b011399184e4a2ca50a5a54864cb373a2c1871c9f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.createOffer(IOffer.OfferType,string,address,uint256,uint256,uint256,string)._description (contracts/Offer.sol#102) is not in mixedCase\n",
            "markdown": "Parameter [Offer.createOffer(IOffer.OfferType,string,address,uint256,uint256,uint256,string)._description](contracts/Offer.sol#L102) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 102
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "be411a5aaf2717d75ed00dd277976606a1033a3d0219c30091f015d419350b3b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.initialize(address)._hub (contracts/Offer.sol#57) is not in mixedCase\n",
            "markdown": "Parameter [Offer.initialize(address)._hub](contracts/Offer.sol#L57) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bf1e280257921e7706a7f237e88332442e1f271491c4132bb343f742d6a1b0e4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable UUPSUpgradeable.__self (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#22) is not in mixedCase\n",
            "markdown": "Variable [UUPSUpgradeable.__self](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#L22) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 22
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bfe49cc9b28397f73932ef963ff532a1f0ce51ddd0b26dae025d661602049864"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.isTokenPriceValid(address)._token (contracts/PriceOracle.sol#307) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.isTokenPriceValid(address)._token](contracts/PriceOracle.sol#L307) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 307,
                  "endLine": 307
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c372e99104cb327976bfb8ac6841f45d63342cb440485e403f257f7afd26628e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Profile.updateHub(address)._newHub (contracts/Profile.sol#309) is not in mixedCase\n",
            "markdown": "Parameter [Profile.updateHub(address)._newHub](contracts/Profile.sol#L309) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 309,
                  "endLine": 309
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c4f5e37f24ff3c0ce26cd660e0f2f39bdf5118212c55fcf8944077c987975a57"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable Trade.__gap (contracts/Trade.sol#52) is not in mixedCase\n",
            "markdown": "Variable [Trade.__gap](contracts/Trade.sol#L52) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c574625cc723886775a1b16cab359b8ff6f74bd208d550f80d0d2c92eec40a96"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Hub.updateConfig(IHub.HubConfig)._newConfig (contracts/Hub.sol#116) is not in mixedCase\n",
            "markdown": "Parameter [Hub.updateConfig(IHub.HubConfig)._newConfig](contracts/Hub.sol#L116) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Hub.sol"
                },
                "region": {
                  "startLine": 116,
                  "endLine": 116
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c6053e1c81528916f5e01ce9110aece09f9e4a13149e67a9bed211a071746e87"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable Profile.__gap (contracts/Profile.sol#32) is not in mixedCase\n",
            "markdown": "Variable [Profile.__gap](contracts/Profile.sol#L32) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ca5a61b207e60a8d3f31a1b396ae5902fef99221ae6046abf4f71dc56ffdfc19"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function UUPSUpgradeable.__UUPSUpgradeable_init() (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#65-66) is not in mixedCase\n",
            "markdown": "Function [UUPSUpgradeable.__UUPSUpgradeable_init()](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#L65-L66) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 66
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cb76c4a025b81b1d34120a39f72a25e8426de1c2f55fbd29d6a5eb8442335219"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.refundExpiredTrade(uint256)._tradeId (contracts/Trade.sol#474) is not in mixedCase\n",
            "markdown": "Parameter [Trade.refundExpiredTrade(uint256)._tradeId](contracts/Trade.sol#L474) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 474,
                  "endLine": 474
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cc500cadab7a362b0cc695e8cd8b5cd1dc913264051a92155b18aebe086a08eb"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.registerPriceRoute(address,address[],uint24[],address,uint32)._twapPeriod (contracts/PriceOracle.sol#178) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.registerPriceRoute(address,address[],uint24[],address,uint32)._twapPeriod](contracts/PriceOracle.sol#L178) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 178,
                  "endLine": 178
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ce1b5e6216e5dd4598602117022ed031d4dbcc8dbf893110ec5cab48dac8f915"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Hub.isOperationPaused(bytes32)._operation (contracts/Hub.sol#330) is not in mixedCase\n",
            "markdown": "Parameter [Hub.isOperationPaused(bytes32)._operation](contracts/Hub.sol#L330) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Hub.sol"
                },
                "region": {
                  "startLine": 330,
                  "endLine": 330
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d4b9c71f995faeba8d8fcfbcf0dd0c3e836bbaea21767e0b06084920414053b8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Profile.updateActiveOffers(address,int256)._delta (contracts/Profile.sol#156) is not in mixedCase\n",
            "markdown": "Parameter [Profile.updateActiveOffers(address,int256)._delta](contracts/Profile.sol#L156) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 156,
                  "endLine": 156
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d559bdfd2d57f556e8ce90e2756adcf86147572d2c409fd144b0808742626423"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.createOffer(IOffer.OfferType,string,address,uint256,uint256,uint256,string)._type (contracts/Offer.sol#96) is not in mixedCase\n",
            "markdown": "Parameter [Offer.createOffer(IOffer.OfferType,string,address,uint256,uint256,uint256,string)._type](contracts/Offer.sol#L96) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 96
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d599897076aae6ec249911f6062a11698a313ba15b33cbdcf5c4f5679b2ac556"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Hub.pauseOperation(bytes32)._operation (contracts/Hub.sol#188) is not in mixedCase\n",
            "markdown": "Parameter [Hub.pauseOperation(bytes32)._operation](contracts/Hub.sol#L188) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Hub.sol"
                },
                "region": {
                  "startLine": 188,
                  "endLine": 188
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d5db986e7cd7960c6fbe58e2dc79f6fdb6a84a8766b35a0986e46492ab1efe0a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.configureVRF(address,uint64,bytes32,uint32,uint16)._vrfCoordinator (contracts/Trade.sol#678) is not in mixedCase\n",
            "markdown": "Parameter [Trade.configureVRF(address,uint64,bytes32,uint32,uint16)._vrfCoordinator](contracts/Trade.sol#L678) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 678,
                  "endLine": 678
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d7514172480a4d88715169a1b0c0a6641901b429ea5da16d0a5a36c84d4979c9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.getOffersByType(IOffer.OfferType,string,address,uint256,uint256)._offset (contracts/Offer.sol#298) is not in mixedCase\n",
            "markdown": "Parameter [Offer.getOffersByType(IOffer.OfferType,string,address,uint256,uint256)._offset](contracts/Offer.sol#L298) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 298,
                  "endLine": 298
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d7c68b36e93464b63da5071b26596f60a0e820e432faf0fecf391fd583d439f0"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.configureVRF(address,uint64,bytes32,uint32,uint16)._requestConfirmations (contracts/Trade.sol#682) is not in mixedCase\n",
            "markdown": "Parameter [Trade.configureVRF(address,uint64,bytes32,uint32,uint16)._requestConfirmations](contracts/Trade.sol#L682) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 682,
                  "endLine": 682
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d7f5b45cb8eb7091a997264b5ef8ed0d304ba02f6debab9a9219c4d6a2fdf9fa"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant ReentrancyGuardUpgradeable.ReentrancyGuardStorageLocation (node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#47) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [ReentrancyGuardUpgradeable.ReentrancyGuardStorageLocation](node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#L47) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d99d11cc0f723d6a83f22b62a548455749daba0aa55a2086d6d260beab797227"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.registerArbitrator(string[],string)._encryptionKey (contracts/Trade.sol#730) is not in mixedCase\n",
            "markdown": "Parameter [Trade.registerArbitrator(string[],string)._encryptionKey](contracts/Trade.sol#L730) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 730,
                  "endLine": 730
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "db1e503cd5c40b488abf80176f2c752dca8811e74add44a655ea664fe2d92d51"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.getTrade(uint256)._tradeId (contracts/Trade.sol#858) is not in mixedCase\n",
            "markdown": "Parameter [Trade.getTrade(uint256)._tradeId](contracts/Trade.sol#L858) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 858,
                  "endLine": 858
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dca2023e0d538375f2980d5580883d6cc457228e5c42656348777be225b7ec2c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.initialize(address,address,address)._hub (contracts/Trade.sol#186) is not in mixedCase\n",
            "markdown": "Parameter [Trade.initialize(address,address,address)._hub](contracts/Trade.sol#L186) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 186,
                  "endLine": 186
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dd60894e69e4e4d5be17de47c7b2296cda398ef88e4dfa615266638a22953a7b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Profile.initialize(address)._hub (contracts/Profile.sol#79) is not in mixedCase\n",
            "markdown": "Parameter [Profile.initialize(address)._hub](contracts/Profile.sol#L79) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 79,
                  "endLine": 79
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dfb18bd7854ef1ab3b7f1b03b6425e7f8ffbb417ac4a68ebd0d6b8203f27b9d9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.getArbitratorInfo(address)._arbitrator (contracts/Trade.sol#817) is not in mixedCase\n",
            "markdown": "Parameter [Trade.getArbitratorInfo(address)._arbitrator](contracts/Trade.sol#L817) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 817,
                  "endLine": 817
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e269ded3d0604782358fdef720cf326a24b653a93502562e5a7011d7d1987e37"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.updateOfferState(uint256,IOffer.OfferState)._newState (contracts/Offer.sol#384) is not in mixedCase\n",
            "markdown": "Parameter [Offer.updateOfferState(uint256,IOffer.OfferState)._newState](contracts/Offer.sol#L384) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 384,
                  "endLine": 384
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e27ef4cdceb05d4da49f46b62c221435d52c7097722962cd82d2cee898a6f944"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.createOffer(IOffer.OfferType,string,address,uint256,uint256,uint256,string)._maxAmount (contracts/Offer.sol#100) is not in mixedCase\n",
            "markdown": "Parameter [Offer.createOffer(IOffer.OfferType,string,address,uint256,uint256,uint256,string)._maxAmount](contracts/Offer.sol#L100) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e3032f996656ffd4a9ca072945a9f803dc7ad59dca1c268ea58779cecd0c06aa"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.submitEvidence(uint256,string)._evidence (contracts/Trade.sol#573) is not in mixedCase\n",
            "markdown": "Parameter [Trade.submitEvidence(uint256,string)._evidence](contracts/Trade.sol#L573) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 573,
                  "endLine": 573
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e629df2554a8d85ca6ec006e27ace38ca5ca8702608156ad70a7e398b38e2f03"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.registerPriceRoute(address,address[],uint24[],address,uint32)._token (contracts/PriceOracle.sol#174) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.registerPriceRoute(address,address[],uint24[],address,uint32)._token](contracts/PriceOracle.sol#L174) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 174,
                  "endLine": 174
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e81d80d562478d34020e5c7d575b7e65f709a0fd5ac659ea7cc9a751aa456379"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.getOffersByType(IOffer.OfferType,string,address,uint256,uint256)._limit (contracts/Offer.sol#299) is not in mixedCase\n",
            "markdown": "Parameter [Offer.getOffersByType(IOffer.OfferType,string,address,uint256,uint256)._limit](contracts/Offer.sol#L299) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 299,
                  "endLine": 299
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e8d3322a9640761409a09c44573ceaa0a2cf37e6cff4c709c5dbbf3534f23f9f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Hub.initialize(IHub.HubConfig)._initialConfig (contracts/Hub.sol#88) is not in mixedCase\n",
            "markdown": "Parameter [Hub.initialize(IHub.HubConfig)._initialConfig](contracts/Hub.sol#L88) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Hub.sol"
                },
                "region": {
                  "startLine": 88,
                  "endLine": 88
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e9723755f1ef9fc2586e905a583b1020bf675e899815de183c2660206224ee01"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Profile.updateAdmin(address)._newAdmin (contracts/Profile.sol#320) is not in mixedCase\n",
            "markdown": "Parameter [Profile.updateAdmin(address)._newAdmin](contracts/Profile.sol#L320) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 320,
                  "endLine": 320
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "eb74b9892a2084bad9fa1fa9a43d90de7a572e9d9b206c57b413d99bd8d655d2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.submitEvidence(uint256,string)._tradeId (contracts/Trade.sol#573) is not in mixedCase\n",
            "markdown": "Parameter [Trade.submitEvidence(uint256,string)._tradeId](contracts/Trade.sol#L573) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 573,
                  "endLine": 573
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ebd2f4cf0f79e11219de4387012b8a20668a1268ce7953295a8151f25a527e17"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ContextUpgradeable.__Context_init() (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#18-19) is not in mixedCase\n",
            "markdown": "Function [ContextUpgradeable.__Context_init()](node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#L18-L19) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 19
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ec47067e22967ab37ddb79c5eae4c225b0c9f1e4e15f1452db70b0a6f86103e0"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.getUserOffers(address,uint256,uint256)._offset (contracts/Offer.sol#334) is not in mixedCase\n",
            "markdown": "Parameter [Offer.getUserOffers(address,uint256,uint256)._offset](contracts/Offer.sol#L334) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 334,
                  "endLine": 334
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f0d5208d31163f2eb045f2c7fe4661de7421039f75d5a866fd0178fc56542eac"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Offer.activateOffer(uint256)._offerId (contracts/Offer.sol#253) is not in mixedCase\n",
            "markdown": "Parameter [Offer.activateOffer(uint256)._offerId](contracts/Offer.sol#L253) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Offer.sol"
                },
                "region": {
                  "startLine": 253,
                  "endLine": 253
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f16c32680a4d5b934f14c0a6eead43c802658f84a18373d61624e9a5cd7c9c72"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Hub.batchUnpauseOperations(bytes32[])._operations (contracts/Hub.sol#267) is not in mixedCase\n",
            "markdown": "Parameter [Hub.batchUnpauseOperations(bytes32[])._operations](contracts/Hub.sol#L267) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Hub.sol"
                },
                "region": {
                  "startLine": 267,
                  "endLine": 267
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f1dfc9e3ddfa71efd36d03feeb108d78bf33a3cf3d697d93f9a8cd208384e1f4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.getFiatPrice(string)._currency (contracts/PriceOracle.sol#284) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.getFiatPrice(string)._currency](contracts/PriceOracle.sol#L284) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 284,
                  "endLine": 284
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f21e4e7b715a1e4a40f4d4c2c050004bd0207e009792505a77ffb3d4221d2625"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ERC165Upgradeable.__ERC165_init() (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#22-23) is not in mixedCase\n",
            "markdown": "Function [ERC165Upgradeable.__ERC165_init()](node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#L22-L23) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 23
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f226b70c0c428d938e421293c43b68d973d744168b94b568e0deb7b189c26f50"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Hub.batchPauseOperations(bytes32[])._operations (contracts/Hub.sol#252) is not in mixedCase\n",
            "markdown": "Parameter [Hub.batchPauseOperations(bytes32[])._operations](contracts/Hub.sol#L252) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Hub.sol"
                },
                "region": {
                  "startLine": 252,
                  "endLine": 252
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f29e114136585da432c5c291c592f6c256c6f3b6d58995e9be34195ca98af7fd"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Profile.getReputationScore(address)._user (contracts/Profile.sol#270) is not in mixedCase\n",
            "markdown": "Parameter [Profile.getReputationScore(address)._user](contracts/Profile.sol#L270) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 270,
                  "endLine": 270
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fad0f9c90b171bb676eb40bb33c9e703b95ac416f1490f9249101a64dfec1e67"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function Trade._performSwapAndBurn(address,uint256,address,address) (contracts/Trade.sol#1000-1037) is not in mixedCase\n",
            "markdown": "Function [Trade._performSwapAndBurn(address,uint256,address,address)](contracts/Trade.sol#L1000-L1037) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 1000,
                  "endLine": 1037
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fb3d675464733f8ae1292cac2b254887fe00a3993978386adcac400297802813"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Trade.deactivateArbitrator(address)._arbitrator (contracts/Trade.sol#802) is not in mixedCase\n",
            "markdown": "Parameter [Trade.deactivateArbitrator(address)._arbitrator](contracts/Trade.sol#L802) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 802,
                  "endLine": 802
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fc5a7939dd3ac48d4f726ee84ba64ccaa8870070b826a9d2babc57994b7aecb9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.updateChainlinkFeed(string,address,uint8,uint256)._currency (contracts/PriceOracle.sol#206) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.updateChainlinkFeed(string,address,uint8,uint256)._currency](contracts/PriceOracle.sol#L206) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 206,
                  "endLine": 206
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ff37dafeb4d536742a9bd4f7430fe5a2add0828da48505072966e3df27e98080"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PriceOracle.registerPriceRoute(address,address[],uint24[],address,uint32)._fees (contracts/PriceOracle.sol#176) is not in mixedCase\n",
            "markdown": "Parameter [PriceOracle.registerPriceRoute(address,address[],uint24[],address,uint32)._fees](contracts/PriceOracle.sol#L176) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 176,
                  "endLine": 176
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ffc3feb79951f2482e515e0c17d8daf2e3f9eabc66d8f9cf2e132db8a76e6827"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "Math.log2(uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#612-651) uses literals with too many digits:\n\t- r = r | byte(uint256,uint256)(x >> r,0x0000010102020202030303030303030300000000000000000000000000000000) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#649)\n",
            "markdown": "[Math.log2(uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L612-L651) uses literals with too many digits:\n\t- [r = r | byte(uint256,uint256)(x >> r,0x0000010102020202030303030303030300000000000000000000000000000000)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L649)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 612,
                  "endLine": 651
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9c0058e8e0ebe9a88b5c491139a8d4df04b051acd8fe32b27078947f548e7c7d"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "Trade.configureVRF(address,uint64,bytes32,uint32,uint16) (contracts/Trade.sol#677-697) uses literals with too many digits:\n\t- require(bool,string)(_callbackGasLimit >= 100000,Gas limit too low) (contracts/Trade.sol#686)\n",
            "markdown": "[Trade.configureVRF(address,uint64,bytes32,uint32,uint16)](contracts/Trade.sol#L677-L697) uses literals with too many digits:\n\t- [require(bool,string)(_callbackGasLimit >= 100000,Gas limit too low)](contracts/Trade.sol#L686)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 677,
                  "endLine": 697
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b0ad1cc63776d474ab229f5e40834e5df1749ac9a932ca1f02f42bfc5aa4c273"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "Profile.__gap (contracts/Profile.sol#32) is never used in Profile (contracts/Profile.sol#16-344)\n",
            "markdown": "[Profile.__gap](contracts/Profile.sol#L32) is never used in [Profile](contracts/Profile.sol#L16-L344)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Profile.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4a4942d0ec5df07ee9683af545be709f39ddd64a2905c7880f1906334196f3df"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "Hub.__gap (contracts/Hub.sol#55) is never used in Hub (contracts/Hub.sol#16-475)\n",
            "markdown": "[Hub.__gap](contracts/Hub.sol#L55) is never used in [Hub](contracts/Hub.sol#L16-L475)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Hub.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4e0c064ab69942dcaf6e9618ad425fa64e2c8227b85630fb7242d457fc0a5831"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "Trade.__gap (contracts/Trade.sol#52) is never used in Trade (contracts/Trade.sol#23-1255)\n",
            "markdown": "[Trade.__gap](contracts/Trade.sol#L52) is never used in [Trade](contracts/Trade.sol#L23-L1255)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Trade.sol"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "933bebe9e2ef7f6b47c4b916c267b5e7c921487a31cc54fc1149c75d9660c0ed"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "PriceOracle.__gap (contracts/PriceOracle.sol#70) is never used in PriceOracle (contracts/PriceOracle.sol#19-551)\n",
            "markdown": "[PriceOracle.__gap](contracts/PriceOracle.sol#L70) is never used in [PriceOracle](contracts/PriceOracle.sol#L19-L551)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PriceOracle.sol"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a9dc1460192fcfb8f6307a8ec809fcf5e95d6c2dc07a283a7364e83b503dbfaf"
          }
        },
        {
          "ruleId": "4-0-immutable-states",
          "message": {
            "text": "MockERC20._decimals (contracts/MockERC20.sol#12) should be immutable \n",
            "markdown": "[MockERC20._decimals](contracts/MockERC20.sol#L12) should be immutable \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/MockERC20.sol"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "95c0f8b60f648184e5e1d783ea2ea89510482c6ce24db3b965b81368473399ce"
          }
        }
      ]
    }
  ]
}